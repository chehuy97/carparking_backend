{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:24:07.535Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:24:56.503Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:25:15.717Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:25:59.647Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:26:12.080Z'
}
{
  level: 'error',
  message: ReferenceError: Role is not defined
      at login (D:\CarParking-BackEnd\controllers\authController.js:15:18)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:28:17.336Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:28:52.074Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:29:20.015Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:30:13.867Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:30:32.286Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:31:10.976Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:31:20.367Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:32:59.212Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:33:28.222Z'
}
{
  level: 'error',
  message: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
      at ServerResponse.setHeader (_http_outgoing.js:485:11)
      at ServerResponse.header (D:\CarParking-BackEnd\node_modules\express\lib\response.js:771:10)
      at ServerResponse.send (D:\CarParking-BackEnd\node_modules\express\lib\response.js:170:12)
      at ServerResponse.json (D:\CarParking-BackEnd\node_modules\express\lib\response.js:267:15)
      at login (D:\CarParking-BackEnd\controllers\authController.js:40:9),
  timestamp: '2019-11-03T05:35:17.974Z'
}
{ level: 'error', timestamp: '2019-11-03T05:35:17.978Z' }
{
  level: 'error',
  message: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
      at ServerResponse.setHeader (_http_outgoing.js:485:11)
      at ServerResponse.header (D:\CarParking-BackEnd\node_modules\express\lib\response.js:771:10)
      at ServerResponse.send (D:\CarParking-BackEnd\node_modules\express\lib\response.js:170:12)
      at ServerResponse.json (D:\CarParking-BackEnd\node_modules\express\lib\response.js:267:15)
      at login (D:\CarParking-BackEnd\controllers\authController.js:40:9),
  timestamp: '2019-11-03T05:36:20.436Z'
}
{ level: 'error', timestamp: '2019-11-03T05:36:20.446Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T06:53:41.198Z'
}
{ level: 'error', timestamp: '2019-11-03T06:53:41.220Z' }
{
  level: 'error',
  message: ReferenceError: user is not defined
      at login (D:\CarParking-BackEnd\controllers\authController.js:39:7),
  timestamp: '2019-11-03T06:53:44.185Z'
}
{
  level: 'error',
  message: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
      at ServerResponse.setHeader (_http_outgoing.js:485:11)
      at ServerResponse.header (D:\CarParking-BackEnd\node_modules\express\lib\response.js:771:10)
      at ServerResponse.send (D:\CarParking-BackEnd\node_modules\express\lib\response.js:170:12)
      at ServerResponse.json (D:\CarParking-BackEnd\node_modules\express\lib\response.js:267:15)
      at login (D:\CarParking-BackEnd\controllers\authController.js:41:9),
  timestamp: '2019-11-03T06:54:21.732Z'
}
{ level: 'error', timestamp: '2019-11-03T06:54:21.735Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T06:56:05.069Z'
}
{ level: 'error', timestamp: '2019-11-03T06:56:05.080Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T06:56:24.816Z'
}
{ level: 'error', timestamp: '2019-11-03T06:56:24.821Z' }
{
  level: 'error',
  message: Error: invalid expiresIn option for string payload
      at Object.module.exports [as sign] (D:\CarParking-BackEnd\node_modules\jsonwebtoken\sign.js:128:22)
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:23),
  timestamp: '2019-11-03T06:56:52.155Z'
}
{
  level: 'error',
  message: Error: invalid expiresIn option for string payload
      at Object.module.exports [as sign] (D:\CarParking-BackEnd\node_modules\jsonwebtoken\sign.js:128:22)
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:23),
  timestamp: '2019-11-03T07:03:58.223Z'
}
{
  name: 'SequelizeValidationError',
  errors: [
    ValidationErrorItem {
      message: 'account.username cannot be null',
      type: 'notNull Violation',
      path: 'username',
      value: null,
      origin: 'CORE',
      instance: account {
        dataValues: {
          status: true,
          id: null,
          username: undefined,
          password: undefined,
          name: undefined,
          birthday: undefined,
          gender: undefined,
          phone: undefined,
          image: 'gdausd4r2346hkdshfdksf',
          balance: 120000
        },
        _previousDataValues: {
          username: undefined,
          password: undefined,
          name: undefined,
          gender: undefined,
          phone: undefined,
          image: undefined,
          balance: undefined
        },
        _changed: {
          username: true,
          password: true,
          name: true,
          gender: true,
          phone: true,
          image: true,
          balance: true
        },
        _modelOptions: {
          timestamps: false,
          validate: {},
          freezeTableName: false,
          underscored: false,
          paranoid: false,
          rejectOnEmpty: false,
          whereCollection: {
            username: 'chehuy97',
            password: '123456',
            __roles: Literal {
              val: '( SELECT `account_role`.`accountId` FROM `account_roles` AS `account_role` INNER JOIN `roles` AS `role` ON `account_role`.`roleId` = `role`.`id` AND `role`.`id` = 3 WHERE (`account`.`id` = `account_role`.`accountId`) LIMIT 1 ) IS NOT NULL'
            },
            [Symbol(and)]: []
          },
          schema: null,
          schemaDelimiter: '',
          defaultScope: {},
          scopes: {},
          indexes: [],
          name: { plural: 'accounts', singular: 'account' },
          omitNull: false,
          charset: 'utf8mb4',
          collate: 'utf8mb4_unicode_520_ci',
          sequelize: Sequelize {
            options: {
              dialect: 'mysql',
              dialectModule: null,
              dialectModulePath: null,
              host: 'localhost',
              protocol: 'tcp',
              define: {
                charset: 'utf8mb4',
                collate: 'utf8mb4_unicode_520_ci',
                timestamps: false
              },
              query: {},
              sync: {},
              timezone: '+00:00',
              clientMinMessages: 'warning',
              standardConformingStrings: true,
              logging: [Function: bound consoleCall],
              omitNull: false,
              native: false,
              replication: false,
              ssl: undefined,
              pool: {},
              quoteIdentifiers: true,
              hooks: {},
              retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
              transactionType: 'DEFERRED',
              isolationLevel: null,
              databaseVersion: '10.4.6',
              typeValidation: false,
              benchmark: false,
              minifyAliases: false,
              logQueryParameters: false,
              username: 'root',
              password: '',
              database: 'carparkingdb2'
            },
            config: {
              database: 'carparkingdb2',
              username: 'root',
              password: null,
              host: 'localhost',
              port: 3306,
              pool: {},
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModule: null,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: undefined
            },
            dialect: MysqlDialect {
              sequelize: [Circular],
              connectionManager: ConnectionManager {
                sequelize: [Circular],
                config: {
                  database: 'carparkingdb2',
                  username: 'root',
                  password: null,
                  host: 'localhost',
                  port: 3306,
                  pool: {
                    max: 5,
                    min: 0,
                    idle: 10000,
                    acquire: 60000,
                    evict: 1000,
                    validate: [Function: bound _validate]
                  },
                  protocol: 'tcp',
                  native: false,
                  ssl: undefined,
                  replication: false,
                  dialectModule: null,
                  dialectModulePath: null,
                  keepDefaultTimezone: undefined,
                  dialectOptions: undefined
                },
                dialect: [Circular],
                versionPromise: null,
                dialectName: 'mysql',
                pool: Pool {
                  _factory: {
                    name: 'sequelize',
                    create: [Function: create],
                    destroy: [Function: destroy],
                    validate: [Function: bound _validate],
                    max: 5,
                    min: 0,
                    acquireTimeoutMillis: 60000,
                    idleTimeoutMillis: 10000,
                    reapIntervalMillis: 1000,
                    reapInterval: 1000,
                    log: false
                  },
                  _count: 0,
                  _draining: false,
                  _pendingAcquires: [],
                  _inUseObjects: [],
                  _availableObjects: [],
                  _removeIdleTimer: Timeout {
                    _idleTimeout: 1000,
                    _idlePrev: null,
                    _idleNext: null,
                    _idleStart: 2486706,
                    _onTimeout: [Function],
                    _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(refed)]: null,
                    [Symbol(asyncId)]: 651,
                    [Symbol(triggerId)]: 650
                  },
                  _removeIdleScheduled: false
                },
                lib: {
                  createConnection: [Function],
                  connect: [Function],
                  Connection: [Function: Connection],
                  createPool: [Function],
                  createPoolCluster: [Function],
                  createQuery: [Function: createQuery],
                  Pool: [Function: Pool],
                  createServer: [Function],
                  PoolConnection: [Function: PoolConnection] {
                    statementKey: [Function: statementKey]
                  },
                  escape: [Function: escape],
                  escapeId: [Function: escapeId],
                  format: [Function: format],
                  raw: [Function: raw],
                  createConnectionPromise: [Getter],
                  createPoolPromise: [Getter],
                  createPoolClusterPromise: [Getter],
                  Types: [Getter],
                  Charsets: [Getter],
                  CharsetToEncoding: [Getter],
                  setMaxParserCache: [Function],
                  clearParserCache: [Function]
                }
              },
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: [Circular],
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            queryInterface: QueryInterface {
              sequelize: [Circular],
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: MysqlDialect {
                  sequelize: [Circular],
                  connectionManager: ConnectionManager {
                    sequelize: [Circular],
                    config: {
                      database: 'carparkingdb2',
                      username: 'root',
                      password: null,
                      host: 'localhost',
                      port: 3306,
                      pool: {
                        max: 5,
                        min: 0,
                        idle: 10000,
                        acquire: 60000,
                        evict: 1000,
                        validate: [Function: bound _validate]
                      },
                      protocol: 'tcp',
                      native: false,
                      ssl: undefined,
                      replication: false,
                      dialectModule: null,
                      dialectModulePath: null,
                      keepDefaultTimezone: undefined,
                      dialectOptions: undefined
                    },
                    dialect: [Circular],
                    versionPromise: null,
                    dialectName: 'mysql',
                    pool: Pool {
                      _factory: {
                        name: 'sequelize',
                        create: [Function: create],
                        destroy: [Function: destroy],
                        validate: [Function: bound _validate],
                        max: 5,
                        min: 0,
                        acquireTimeoutMillis: 60000,
                        idleTimeoutMillis: 10000,
                        reapIntervalMillis: 1000,
                        reapInterval: 1000,
                        log: false
                      },
                      _count: 0,
                      _draining: false,
                      _pendingAcquires: [],
                      _inUseObjects: [],
                      _availableObjects: [],
                      _removeIdleTimer: Timeout {
                        _idleTimeout: 1000,
                        _idlePrev: null,
                        _idleNext: null,
                        _idleStart: 2486706,
                        _onTimeout: [Function],
                        _timerArgs: undefined,
                        _repeat: null,
                        _destroyed: false,
                        [Symbol(refed)]: null,
                        [Symbol(asyncId)]: 651,
                        [Symbol(triggerId)]: 650
                      },
                      _removeIdleScheduled: false
                    },
                    lib: {
                      createConnection: [Function],
                      connect: [Function],
                      Connection: [Function: Connection],
                      createPool: [Function],
                      createPoolCluster: [Function],
                      createQuery: [Function: createQuery],
                      Pool: [Function: Pool],
                      createServer: [Function],
                      PoolConnection: [Function: PoolConnection] {
                        statementKey: [Function: statementKey]
                      },
                      escape: [Function: escape],
                      escapeId: [Function: escapeId],
                      format: [Function: format],
                      raw: [Function: raw],
                      createConnectionPromise: [Getter],
                      createPoolPromise: [Getter],
                      createPoolClusterPromise: [Getter],
                      Types: [Getter],
                      Charsets: [Getter],
                      CharsetToEncoding: [Getter],
                      setMaxParserCache: [Function],
                      clearParserCache: [Function]
                    }
                  },
                  QueryGenerator: [Circular]
                },
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            models: {
              account: account,
              role: role,
              account_role: account_role,
              car: car,
              yard: yard,
              history: history,
              parking_now: parking_now,
              time_booking: time_booking
            },
            modelManager: ModelManager {
              models: [
                account,      role,
                account_role, car,
                yard,         history,
                parking_now,  time_booking
              ],
              sequelize: [Circular]
            },
            connectionManager: ConnectionManager {
              sequelize: [Circular],
              config: {
                database: 'carparkingdb2',
                username: 'root',
                password: null,
                host: 'localhost',
                port: 3306,
                pool: {
                  max: 5,
                  min: 0,
                  idle: 10000,
                  acquire: 60000,
                  evict: 1000,
                  validate: [Function: bound _validate]
                },
                protocol: 'tcp',
                native: false,
                ssl: undefined,
                replication: false,
                dialectModule: null,
                dialectModulePath: null,
                keepDefaultTimezone: undefined,
                dialectOptions: undefined
              },
              dialect: MysqlDialect {
                sequelize: [Circular],
                connectionManager: [Circular],
                QueryGenerator: MySQLQueryGenerator {
                  sequelize: [Circular],
                  options: {
                    dialect: 'mysql',
                    dialectModule: null,
                    dialectModulePath: null,
                    host: 'localhost',
                    protocol: 'tcp',
                    define: {
                      charset: 'utf8mb4',
                      collate: 'utf8mb4_unicode_520_ci',
                      timestamps: false
                    },
                    query: {},
                    sync: {},
                    timezone: '+00:00',
                    clientMinMessages: 'warning',
                    standardConformingStrings: true,
                    logging: [Function: bound consoleCall],
                    omitNull: false,
                    native: false,
                    replication: false,
                    ssl: undefined,
                    pool: {},
                    quoteIdentifiers: true,
                    hooks: {},
                    retry: {
                      max: 5,
                      match: [ 'SQLITE_BUSY: database is locked' ]
                    },
                    transactionType: 'DEFERRED',
                    isolationLevel: null,
                    databaseVersion: '10.4.6',
                    typeValidation: false,
                    benchmark: false,
                    minifyAliases: false,
                    logQueryParameters: false,
                    username: 'root',
                    password: '',
                    database: 'carparkingdb2'
                  },
                  dialect: 'mysql',
                  _dialect: [Circular],
                  OperatorMap: {
                    [Symbol(eq)]: '=',
                    [Symbol(ne)]: '!=',
                    [Symbol(gte)]: '>=',
                    [Symbol(gt)]: '>',
                    [Symbol(lte)]: '<=',
                    [Symbol(lt)]: '<',
                    [Symbol(not)]: 'IS NOT',
                    [Symbol(is)]: 'IS',
                    [Symbol(in)]: 'IN',
                    [Symbol(notIn)]: 'NOT IN',
                    [Symbol(like)]: 'LIKE',
                    [Symbol(notLike)]: 'NOT LIKE',
                    [Symbol(iLike)]: 'ILIKE',
                    [Symbol(notILike)]: 'NOT ILIKE',
                    [Symbol(startsWith)]: 'LIKE',
                    [Symbol(endsWith)]: 'LIKE',
                    [Symbol(substring)]: 'LIKE',
                    [Symbol(regexp)]: 'REGEXP',
                    [Symbol(notRegexp)]: 'NOT REGEXP',
                    [Symbol(iRegexp)]: '~*',
                    [Symbol(notIRegexp)]: '!~*',
                    [Symbol(between)]: 'BETWEEN',
                    [Symbol(notBetween)]: 'NOT BETWEEN',
                    [Symbol(overlap)]: '&&',
                    [Symbol(contains)]: '@>',
                    [Symbol(contained)]: '<@',
                    [Symbol(adjacent)]: '-|-',
                    [Symbol(strictLeft)]: '<<',
                    [Symbol(strictRight)]: '>>',
                    [Symbol(noExtendRight)]: '&<',
                    [Symbol(noExtendLeft)]: '&>',
                    [Symbol(any)]: 'ANY',
                    [Symbol(all)]: 'ALL',
                    [Symbol(and)]: ' AND ',
                    [Symbol(or)]: ' OR ',
                    [Symbol(col)]: 'COL',
                    [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                  },
                  typeValidation: undefined
                }
              },
              versionPromise: null,
              dialectName: 'mysql',
              pool: Pool {
                _factory: {
                  name: 'sequelize',
                  create: [Function: create],
                  destroy: [Function: destroy],
                  validate: [Function: bound _validate],
                  max: 5,
                  min: 0,
                  acquireTimeoutMillis: 60000,
                  idleTimeoutMillis: 10000,
                  reapIntervalMillis: 1000,
                  reapInterval: 1000,
                  log: false
                },
                _count: 0,
                _draining: false,
                _pendingAcquires: [],
                _inUseObjects: [],
                _availableObjects: [],
                _removeIdleTimer: Timeout {
                  _idleTimeout: 1000,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 2486706,
                  _onTimeout: [Function],
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: false,
                  [Symbol(refed)]: null,
                  [Symbol(asyncId)]: 651,
                  [Symbol(triggerId)]: 650
                },
                _removeIdleScheduled: false
              },
              lib: {
                createConnection: [Function],
                connect: [Function],
                Connection: [Function: Connection],
                createPool: [Function],
                createPoolCluster: [Function],
                createQuery: [Function: createQuery],
                Pool: [Function: Pool],
                createServer: [Function],
                PoolConnection: [Function: PoolConnection] {
                  statementKey: [Function: statementKey]
                },
                escape: [Function: escape],
                escapeId: [Function: escapeId],
                format: [Function: format],
                raw: [Function: raw],
                createConnectionPromise: [Getter],
                createPoolPromise: [Getter],
                createPoolClusterPromise: [Getter],
                Types: [Getter],
                Charsets: [Getter],
                CharsetToEncoding: [Getter],
                setMaxParserCache: [Function],
                clearParserCache: [Function]
              }
            },
            importCache: {}
          },
          hooks: {}
        },
        _options: {
          isNewRecord: true,
          _schema: null,
          _schemaDelimiter: '',
          attributes: undefined,
          include: undefined,
          raw: undefined,
          silent: undefined
        },
        isNewRecord: true
      },
      validatorKey: 'is_null',
      validatorName: null,
      validatorArgs: []
    },
    ValidationErrorItem {
      message: 'account.password cannot be null',
      type: 'notNull Violation',
      path: 'password',
      value: null,
      origin: 'CORE',
      instance: account {
        dataValues: {
          status: true,
          id: null,
          username: undefined,
          password: undefined,
          name: undefined,
          birthday: undefined,
          gender: undefined,
          phone: undefined,
          image: 'gdausd4r2346hkdshfdksf',
          balance: 120000
        },
        _previousDataValues: {
          username: undefined,
          password: undefined,
          name: undefined,
          gender: undefined,
          phone: undefined,
          image: undefined,
          balance: undefined
        },
        _changed: {
          username: true,
          password: true,
          name: true,
          gender: true,
          phone: true,
          image: true,
          balance: true
        },
        _modelOptions: {
          timestamps: false,
          validate: {},
          freezeTableName: false,
          underscored: false,
          paranoid: false,
          rejectOnEmpty: false,
          whereCollection: {
            username: 'chehuy97',
            password: '123456',
            __roles: Literal {
              val: '( SELECT `account_role`.`accountId` FROM `account_roles` AS `account_role` INNER JOIN `roles` AS `role` ON `account_role`.`roleId` = `role`.`id` AND `role`.`id` = 3 WHERE (`account`.`id` = `account_role`.`accountId`) LIMIT 1 ) IS NOT NULL'
            },
            [Symbol(and)]: []
          },
          schema: null,
          schemaDelimiter: '',
          defaultScope: {},
          scopes: {},
          indexes: [],
          name: { plural: 'accounts', singular: 'account' },
          omitNull: false,
          charset: 'utf8mb4',
          collate: 'utf8mb4_unicode_520_ci',
          sequelize: Sequelize {
            options: {
              dialect: 'mysql',
              dialectModule: null,
              dialectModulePath: null,
              host: 'localhost',
              protocol: 'tcp',
              define: {
                charset: 'utf8mb4',
                collate: 'utf8mb4_unicode_520_ci',
                timestamps: false
              },
              query: {},
              sync: {},
              timezone: '+00:00',
              clientMinMessages: 'warning',
              standardConformingStrings: true,
              logging: [Function: bound consoleCall],
              omitNull: false,
              native: false,
              replication: false,
              ssl: undefined,
              pool: {},
              quoteIdentifiers: true,
              hooks: {},
              retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
              transactionType: 'DEFERRED',
              isolationLevel: null,
              databaseVersion: '10.4.6',
              typeValidation: false,
              benchmark: false,
              minifyAliases: false,
              logQueryParameters: false,
              username: 'root',
              password: '',
              database: 'carparkingdb2'
            },
            config: {
              database: 'carparkingdb2',
              username: 'root',
              password: null,
              host: 'localhost',
              port: 3306,
              pool: {},
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModule: null,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: undefined
            },
            dialect: MysqlDialect {
              sequelize: [Circular],
              connectionManager: ConnectionManager {
                sequelize: [Circular],
                config: {
                  database: 'carparkingdb2',
                  username: 'root',
                  password: null,
                  host: 'localhost',
                  port: 3306,
                  pool: {
                    max: 5,
                    min: 0,
                    idle: 10000,
                    acquire: 60000,
                    evict: 1000,
                    validate: [Function: bound _validate]
                  },
                  protocol: 'tcp',
                  native: false,
                  ssl: undefined,
                  replication: false,
                  dialectModule: null,
                  dialectModulePath: null,
                  keepDefaultTimezone: undefined,
                  dialectOptions: undefined
                },
                dialect: [Circular],
                versionPromise: null,
                dialectName: 'mysql',
                pool: Pool {
                  _factory: {
                    name: 'sequelize',
                    create: [Function: create],
                    destroy: [Function: destroy],
                    validate: [Function: bound _validate],
                    max: 5,
                    min: 0,
                    acquireTimeoutMillis: 60000,
                    idleTimeoutMillis: 10000,
                    reapIntervalMillis: 1000,
                    reapInterval: 1000,
                    log: false
                  },
                  _count: 0,
                  _draining: false,
                  _pendingAcquires: [],
                  _inUseObjects: [],
                  _availableObjects: [],
                  _removeIdleTimer: Timeout {
                    _idleTimeout: 1000,
                    _idlePrev: null,
                    _idleNext: null,
                    _idleStart: 2486706,
                    _onTimeout: [Function],
                    _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(refed)]: null,
                    [Symbol(asyncId)]: 651,
                    [Symbol(triggerId)]: 650
                  },
                  _removeIdleScheduled: false
                },
                lib: {
                  createConnection: [Function],
                  connect: [Function],
                  Connection: [Function: Connection],
                  createPool: [Function],
                  createPoolCluster: [Function],
                  createQuery: [Function: createQuery],
                  Pool: [Function: Pool],
                  createServer: [Function],
                  PoolConnection: [Function: PoolConnection] {
                    statementKey: [Function: statementKey]
                  },
                  escape: [Function: escape],
                  escapeId: [Function: escapeId],
                  format: [Function: format],
                  raw: [Function: raw],
                  createConnectionPromise: [Getter],
                  createPoolPromise: [Getter],
                  createPoolClusterPromise: [Getter],
                  Types: [Getter],
                  Charsets: [Getter],
                  CharsetToEncoding: [Getter],
                  setMaxParserCache: [Function],
                  clearParserCache: [Function]
                }
              },
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: [Circular],
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            queryInterface: QueryInterface {
              sequelize: [Circular],
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: MysqlDialect {
                  sequelize: [Circular],
                  connectionManager: ConnectionManager {
                    sequelize: [Circular],
                    config: {
                      database: 'carparkingdb2',
                      username: 'root',
                      password: null,
                      host: 'localhost',
                      port: 3306,
                      pool: {
                        max: 5,
                        min: 0,
                        idle: 10000,
                        acquire: 60000,
                        evict: 1000,
                        validate: [Function: bound _validate]
                      },
                      protocol: 'tcp',
                      native: false,
                      ssl: undefined,
                      replication: false,
                      dialectModule: null,
                      dialectModulePath: null,
                      keepDefaultTimezone: undefined,
                      dialectOptions: undefined
                    },
                    dialect: [Circular],
                    versionPromise: null,
                    dialectName: 'mysql',
                    pool: Pool {
                      _factory: {
                        name: 'sequelize',
                        create: [Function: create],
                        destroy: [Function: destroy],
                        validate: [Function: bound _validate],
                        max: 5,
                        min: 0,
                        acquireTimeoutMillis: 60000,
                        idleTimeoutMillis: 10000,
                        reapIntervalMillis: 1000,
                        reapInterval: 1000,
                        log: false
                      },
                      _count: 0,
                      _draining: false,
                      _pendingAcquires: [],
                      _inUseObjects: [],
                      _availableObjects: [],
                      _removeIdleTimer: Timeout {
                        _idleTimeout: 1000,
                        _idlePrev: null,
                        _idleNext: null,
                        _idleStart: 2486706,
                        _onTimeout: [Function],
                        _timerArgs: undefined,
                        _repeat: null,
                        _destroyed: false,
                        [Symbol(refed)]: null,
                        [Symbol(asyncId)]: 651,
                        [Symbol(triggerId)]: 650
                      },
                      _removeIdleScheduled: false
                    },
                    lib: {
                      createConnection: [Function],
                      connect: [Function],
                      Connection: [Function: Connection],
                      createPool: [Function],
                      createPoolCluster: [Function],
                      createQuery: [Function: createQuery],
                      Pool: [Function: Pool],
                      createServer: [Function],
                      PoolConnection: [Function: PoolConnection] {
                        statementKey: [Function: statementKey]
                      },
                      escape: [Function: escape],
                      escapeId: [Function: escapeId],
                      format: [Function: format],
                      raw: [Function: raw],
                      createConnectionPromise: [Getter],
                      createPoolPromise: [Getter],
                      createPoolClusterPromise: [Getter],
                      Types: [Getter],
                      Charsets: [Getter],
                      CharsetToEncoding: [Getter],
                      setMaxParserCache: [Function],
                      clearParserCache: [Function]
                    }
                  },
                  QueryGenerator: [Circular]
                },
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            models: {
              account: account,
              role: role,
              account_role: account_role,
              car: car,
              yard: yard,
              history: history,
              parking_now: parking_now,
              time_booking: time_booking
            },
            modelManager: ModelManager {
              models: [
                account,      role,
                account_role, car,
                yard,         history,
                parking_now,  time_booking
              ],
              sequelize: [Circular]
            },
            connectionManager: ConnectionManager {
              sequelize: [Circular],
              config: {
                database: 'carparkingdb2',
                username: 'root',
                password: null,
                host: 'localhost',
                port: 3306,
                pool: {
                  max: 5,
                  min: 0,
                  idle: 10000,
                  acquire: 60000,
                  evict: 1000,
                  validate: [Function: bound _validate]
                },
                protocol: 'tcp',
                native: false,
                ssl: undefined,
                replication: false,
                dialectModule: null,
                dialectModulePath: null,
                keepDefaultTimezone: undefined,
                dialectOptions: undefined
              },
              dialect: MysqlDialect {
                sequelize: [Circular],
                connectionManager: [Circular],
                QueryGenerator: MySQLQueryGenerator {
                  sequelize: [Circular],
                  options: {
                    dialect: 'mysql',
                    dialectModule: null,
                    dialectModulePath: null,
                    host: 'localhost',
                    protocol: 'tcp',
                    define: {
                      charset: 'utf8mb4',
                      collate: 'utf8mb4_unicode_520_ci',
                      timestamps: false
                    },
                    query: {},
                    sync: {},
                    timezone: '+00:00',
                    clientMinMessages: 'warning',
                    standardConformingStrings: true,
                    logging: [Function: bound consoleCall],
                    omitNull: false,
                    native: false,
                    replication: false,
                    ssl: undefined,
                    pool: {},
                    quoteIdentifiers: true,
                    hooks: {},
                    retry: {
                      max: 5,
                      match: [ 'SQLITE_BUSY: database is locked' ]
                    },
                    transactionType: 'DEFERRED',
                    isolationLevel: null,
                    databaseVersion: '10.4.6',
                    typeValidation: false,
                    benchmark: false,
                    minifyAliases: false,
                    logQueryParameters: false,
                    username: 'root',
                    password: '',
                    database: 'carparkingdb2'
                  },
                  dialect: 'mysql',
                  _dialect: [Circular],
                  OperatorMap: {
                    [Symbol(eq)]: '=',
                    [Symbol(ne)]: '!=',
                    [Symbol(gte)]: '>=',
                    [Symbol(gt)]: '>',
                    [Symbol(lte)]: '<=',
                    [Symbol(lt)]: '<',
                    [Symbol(not)]: 'IS NOT',
                    [Symbol(is)]: 'IS',
                    [Symbol(in)]: 'IN',
                    [Symbol(notIn)]: 'NOT IN',
                    [Symbol(like)]: 'LIKE',
                    [Symbol(notLike)]: 'NOT LIKE',
                    [Symbol(iLike)]: 'ILIKE',
                    [Symbol(notILike)]: 'NOT ILIKE',
                    [Symbol(startsWith)]: 'LIKE',
                    [Symbol(endsWith)]: 'LIKE',
                    [Symbol(substring)]: 'LIKE',
                    [Symbol(regexp)]: 'REGEXP',
                    [Symbol(notRegexp)]: 'NOT REGEXP',
                    [Symbol(iRegexp)]: '~*',
                    [Symbol(notIRegexp)]: '!~*',
                    [Symbol(between)]: 'BETWEEN',
                    [Symbol(notBetween)]: 'NOT BETWEEN',
                    [Symbol(overlap)]: '&&',
                    [Symbol(contains)]: '@>',
                    [Symbol(contained)]: '<@',
                    [Symbol(adjacent)]: '-|-',
                    [Symbol(strictLeft)]: '<<',
                    [Symbol(strictRight)]: '>>',
                    [Symbol(noExtendRight)]: '&<',
                    [Symbol(noExtendLeft)]: '&>',
                    [Symbol(any)]: 'ANY',
                    [Symbol(all)]: 'ALL',
                    [Symbol(and)]: ' AND ',
                    [Symbol(or)]: ' OR ',
                    [Symbol(col)]: 'COL',
                    [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                  },
                  typeValidation: undefined
                }
              },
              versionPromise: null,
              dialectName: 'mysql',
              pool: Pool {
                _factory: {
                  name: 'sequelize',
                  create: [Function: create],
                  destroy: [Function: destroy],
                  validate: [Function: bound _validate],
                  max: 5,
                  min: 0,
                  acquireTimeoutMillis: 60000,
                  idleTimeoutMillis: 10000,
                  reapIntervalMillis: 1000,
                  reapInterval: 1000,
                  log: false
                },
                _count: 0,
                _draining: false,
                _pendingAcquires: [],
                _inUseObjects: [],
                _availableObjects: [],
                _removeIdleTimer: Timeout {
                  _idleTimeout: 1000,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 2486706,
                  _onTimeout: [Function],
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: false,
                  [Symbol(refed)]: null,
                  [Symbol(asyncId)]: 651,
                  [Symbol(triggerId)]: 650
                },
                _removeIdleScheduled: false
              },
              lib: {
                createConnection: [Function],
                connect: [Function],
                Connection: [Function: Connection],
                createPool: [Function],
                createPoolCluster: [Function],
                createQuery: [Function: createQuery],
                Pool: [Function: Pool],
                createServer: [Function],
                PoolConnection: [Function: PoolConnection] {
                  statementKey: [Function: statementKey]
                },
                escape: [Function: escape],
                escapeId: [Function: escapeId],
                format: [Function: format],
                raw: [Function: raw],
                createConnectionPromise: [Getter],
                createPoolPromise: [Getter],
                createPoolClusterPromise: [Getter],
                Types: [Getter],
                Charsets: [Getter],
                CharsetToEncoding: [Getter],
                setMaxParserCache: [Function],
                clearParserCache: [Function]
              }
            },
            importCache: {}
          },
          hooks: {}
        },
        _options: {
          isNewRecord: true,
          _schema: null,
          _schemaDelimiter: '',
          attributes: undefined,
          include: undefined,
          raw: undefined,
          silent: undefined
        },
        isNewRecord: true
      },
      validatorKey: 'is_null',
      validatorName: null,
      validatorArgs: []
    }
  ],
  level: 'error',
  message: 'notNull Violation: account.username cannot be null,\n' +
    'notNull Violation: account.password cannot be nullnotNull Violation: account.username cannot be null,\n' +
    'notNull Violation: account.password cannot be null',
  stack: 'SequelizeValidationError: notNull Violation: account.username cannot be null,\n' +
    'notNull Violation: account.password cannot be null\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\instance-validator.js:74:15\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at Promise._fulfill (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:673:18)\n' +
    '    at PromiseArray._resolve (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)\n' +
    '    at PromiseArray._promiseFulfilled (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:609:26)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-03T07:52:51.229Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:07:16.914Z'
}
{ level: 'error', timestamp: '2019-11-03T08:07:16.917Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:07:33.943Z'
}
{ level: 'error', timestamp: '2019-11-03T08:07:33.945Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:17:39.557Z'
}
{ level: 'error', timestamp: '2019-11-03T08:17:39.560Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:19:30.106Z'
}
{ level: 'error', timestamp: '2019-11-03T08:19:30.108Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:20:04.615Z'
}
{ level: 'error', timestamp: '2019-11-03T08:20:04.621Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:24:35.191Z'
}
{ level: 'error', timestamp: '2019-11-03T08:24:35.192Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:25:27.825Z'
}
{ level: 'error', timestamp: '2019-11-03T08:25:27.826Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:26:31.730Z'
}
{ level: 'error', timestamp: '2019-11-03T08:26:31.732Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:27:15.598Z'
}
{ level: 'error', timestamp: '2019-11-03T08:27:15.601Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:27:47.793Z'
}
{ level: 'error', timestamp: '2019-11-03T08:27:47.796Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:33:44.083Z'
}
{ level: 'error', timestamp: '2019-11-03T08:33:44.085Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:35:01.120Z'
}
{ level: 'error', timestamp: '2019-11-03T08:35:01.122Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:50:02.336Z'
}
{ level: 'error', timestamp: '2019-11-03T08:50:02.338Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:58:50.671Z'
}
{ level: 'error', timestamp: '2019-11-03T08:58:50.672Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:26.551Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:26.553Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:28.565Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:28.567Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:37.847Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:37.849Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:54.557Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:54.558Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:02:03.893Z'
}
{ level: 'error', timestamp: '2019-11-03T09:02:03.894Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:02:25.709Z'
}
{ level: 'error', timestamp: '2019-11-03T09:02:25.711Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:02:28.971Z'
}
{ level: 'error', timestamp: '2019-11-03T09:02:28.973Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:08:21.497Z'
}
{ level: 'error', timestamp: '2019-11-03T09:08:21.499Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:09:55.065Z'
}
{ level: 'error', timestamp: '2019-11-03T09:09:55.067Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:14:17.917Z'
}
{ level: 'error', timestamp: '2019-11-03T09:14:17.918Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:19:17.474Z'
}
{ level: 'error', timestamp: '2019-11-03T09:19:17.476Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:28:02.494Z'
}
{ level: 'error', timestamp: '2019-11-03T09:28:02.496Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:33:55.186Z'
}
{ level: 'error', timestamp: '2019-11-03T09:33:55.188Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:36:10.670Z'
}
{ level: 'error', timestamp: '2019-11-03T09:36:10.671Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T10:55:40.354Z'
}
{ level: 'error', timestamp: '2019-11-03T10:55:40.356Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:04:22.110Z'
}
{ level: 'error', timestamp: '2019-11-03T11:04:22.111Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:16:02.850Z'
}
{ level: 'error', timestamp: '2019-11-03T11:16:02.855Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:17:19.358Z'
}
{ level: 'error', timestamp: '2019-11-03T11:17:19.359Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:17:25.317Z'
}
{ level: 'error', timestamp: '2019-11-03T11:17:25.318Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:18:32.155Z'
}
{ level: 'error', timestamp: '2019-11-03T11:18:32.157Z' }
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T11:18:57.093Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:19:02.796Z'
}
{ level: 'error', timestamp: '2019-11-03T11:19:02.799Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:20:34.144Z'
}
{ level: 'error', timestamp: '2019-11-03T11:20:34.148Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-04T02:12:51.327Z'
}
{ level: 'error', timestamp: '2019-11-04T02:12:51.331Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-04T02:13:00.249Z'
}
{ level: 'error', timestamp: '2019-11-04T02:13:00.251Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-04T02:13:51.543Z'
}
{ level: 'error', timestamp: '2019-11-04T02:13:51.549Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T02:31:13.900Z'
}
{ level: 'error', timestamp: '2019-11-04T02:31:13.903Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T03:45:39.147Z'
}
{ level: 'error', timestamp: '2019-11-04T03:45:39.150Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T03:57:51.538Z'
}
{ level: 'error', timestamp: '2019-11-04T03:57:51.540Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T04:02:32.059Z'
}
{ level: 'error', timestamp: '2019-11-04T04:02:32.060Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T04:34:26.681Z'
}
{ level: 'error', timestamp: '2019-11-04T04:34:26.684Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T04:43:16.967Z'
}
{ level: 'error', timestamp: '2019-11-04T04:43:16.970Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T07:49:50.303Z'
}
{ level: 'error', timestamp: '2019-11-04T07:49:50.306Z' }
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-05T01:53:06.756Z'
}
{
  message: 'notNull Violation: yard.point cannot be null',
  level: 'error',
  timestamp: '2019-11-07T01:04:03.999Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-07T01:22:51.809Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`slots`, CONSTRAINT `slots_ibfk_1` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-07T01:23:34.961Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-07T01:25:02.403Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-07T01:25:16.927Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`slots`, CONSTRAINT `slots_ibfk_1` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-07T01:26:14.570Z'
}
{
  level: 'error',
  message: 'body is not definedbody is not defined',
  stack: 'ReferenceError: body is not defined\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:32:28)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-07T02:17:13.640Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to account!slot is not associated to account!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to account!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T02:23:01.968Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to account!slot is not associated to account!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to account!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T02:23:03.644Z'
}
{
  message: 'notNull Violation: yard.time_open cannot be null',
  level: 'error',
  timestamp: '2019-11-07T03:44:17.234Z'
}
{
  message: 'notNull Violation: yard.time_open cannot be null,\n' +
    'notNull Violation: yard.time_close cannot be null',
  level: 'error',
  timestamp: '2019-11-07T03:45:00.473Z'
}
{
  message: 'notNull Violation: yard.time_open cannot be null,\n' +
    'notNull Violation: yard.time_close cannot be null',
  level: 'error',
  timestamp: '2019-11-07T03:45:19.062Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `time0_1` TINYINT(1) NOT NULL DEFAULT 0, `time1_2` TINYINT(1) NOT N' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:53:54.452Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `time0_1` TINYINT(1) NOT NULL DEFAULT 0, `time1_2` TINYINT(1) NOT N' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:55:31.520Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:55:44.270Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:56:55.364Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:59:29.604Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:59:44.730Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:00:08.778Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:00:25.315Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:01:06.886Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:01:41.496Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:04:24.552Z'
}
{
  message: 'string violation: time cannot be an array or an object',
  level: 'error',
  timestamp: '2019-11-07T08:18:55.955Z'
}
{
  message: 'string violation: time cannot be an array or an object',
  level: 'error',
  timestamp: '2019-11-07T08:22:53.175Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:22:55.648Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:23:45.202Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:23:55.630Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:24:19.500Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:24:25.104Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:24:31.246Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:25:18.599Z'
}
{
  message: "Unknown database 'carparkingdb2'",
  level: 'error',
  timestamp: '2019-11-07T08:26:38.688Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:26:57.597Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:28:28.038Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:29:23.998Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:29:34.886Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:29:44.200Z'
}
{
  message: 'value.join is not a function',
  level: 'error',
  timestamp: '2019-11-07T08:47:58.978Z'
}
{
  message: 'value.join is not a function',
  level: 'error',
  timestamp: '2019-11-07T08:48:11.694Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to yard!slot is not associated to yard!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to yard!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T08:52:54.574Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to yard!slot is not associated to yard!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to yard!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T08:52:59.294Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to yard!slot is not associated to yard!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to yard!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T08:53:02.861Z'
}
{
  level: 'error',
  message: 'this.getDataValue(...).split is not a functionthis.getDataValue(...).split is not a function',
  stack: 'TypeError: this.getDataValue(...).split is not a function\n' +
    '    at model.get (D:\\CarParking-BackEnd\\models\\slot.js:11:43)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3509:41)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3543:33)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:64\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:39)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3553:31)\n' +
    '    at model.toJSON (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:4409:12)\n' +
    '    at JSON.stringify (<anonymous>)\n' +
    '    at stringify (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:1123:12)\n' +
    '    at ServerResponse.json (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:260:14)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:36:9)',
  timestamp: '2019-11-07T08:59:21.355Z'
}
{
  level: 'error',
  message: 'this.getDataValue(...).split is not a functionthis.getDataValue(...).split is not a function',
  stack: 'TypeError: this.getDataValue(...).split is not a function\n' +
    '    at model.get (D:\\CarParking-BackEnd\\models\\slot.js:11:43)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3509:41)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3543:33)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:64\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:39)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3553:31)\n' +
    '    at model.toJSON (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:4409:12)\n' +
    '    at JSON.stringify (<anonymous>)\n' +
    '    at stringify (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:1123:12)\n' +
    '    at ServerResponse.json (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:260:14)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:36:9)',
  timestamp: '2019-11-07T09:02:17.297Z'
}
{
  message: 'notNull Violation: yard.price cannot be null',
  level: 'error',
  timestamp: '2019-11-08T06:20:00.684Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`slots`, CONSTRAINT `slots_ibfk_1` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-10T07:32:33.456Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-10T08:32:31.118Z'
}
{ level: 'error', timestamp: '2019-11-10T08:32:31.121Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-10T08:33:33.543Z'
}
{ level: 'error', timestamp: '2019-11-10T08:33:33.545Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-10T10:16:38.099Z'
}
{ level: 'error', timestamp: '2019-11-10T10:16:38.110Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-11T07:30:17.287Z'
}
{ level: 'error', timestamp: '2019-11-11T07:30:17.290Z' }
{
  level: 'error',
  message: 'Car is not definedCar is not defined',
  stack: 'ReferenceError: Car is not defined\n' +
    '    at show_account_detail (D:\\CarParking-BackEnd\\controllers\\accountController.js:22:18)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-11T08:29:36.969Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-12T06:57:30.378Z'
}
{
  level: 'error',
  message: 'value.join is not a functionvalue.join is not a function',
  stack: 'TypeError: value.join is not a function\n' +
    '    at model.set (D:\\CarParking-BackEnd\\models\\slot.js:14:42)\n' +
    '    at model.set (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3653:32)\n' +
    '    at model.funcs.<computed> (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1103:25)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:44:25)',
  timestamp: '2019-11-12T07:53:50.745Z'
}
{
  level: 'error',
  message: 'value.join is not a functionvalue.join is not a function',
  stack: 'TypeError: value.join is not a function\n' +
    '    at model.set (D:\\CarParking-BackEnd\\models\\slot.js:14:42)\n' +
    '    at model.set (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3653:32)\n' +
    '    at model.funcs.<computed> (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1103:25)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:44:26)',
  timestamp: '2019-11-12T07:54:41.848Z'
}
{
  level: 'error',
  message: 'yard.slots[0].times[7].set is not a functionyard.slots[0].times[7].set is not a function',
  stack: 'TypeError: yard.slots[0].times[7].set is not a function\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:71:28)',
  timestamp: '2019-11-12T08:10:00.152Z'
}
{
  message: 'notNull Violation: history.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-12T08:14:49.927Z'
}
{
  level: 'error',
  message: 'histories is not definedhistories is not defined',
  stack: 'ReferenceError: histories is not defined\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:43:14)',
  timestamp: '2019-11-12T08:17:27.162Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Table 'carparkingdb2.yards' doesn't exist
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_NO_SUCH_TABLE',
    errno: 1146,
    sqlState: '42S02',
    sqlMessage: "Table 'carparkingdb2.yards' doesn't exist",
    sql: "SELECT `yard`.`id`, `yard`.`acreage`, `yard`.`status`, `yard`.`address`, `yard`.`image_yard`, `yard`.`latitude`, `yard`.`longitude`, `yard`.`time_open`, `yard`.`time_close`, `yard`.`price`, `yard`.`accountId`, `slots`.`id` AS `slots.id`, `slots`.`times` AS `slots.times`, `slots`.`yardId` AS `slots.yardId` FROM `yards` AS `yard` LEFT OUTER JOIN `slots` AS `slots` ON `yard`.`id` = `slots`.`yardId` WHERE `yard`.`id` = '1';",
    parameters: undefined
  },
  original: Error: Table 'carparkingdb2.yards' doesn't exist
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_NO_SUCH_TABLE',
    errno: 1146,
    sqlState: '42S02',
    sqlMessage: "Table 'carparkingdb2.yards' doesn't exist",
    sql: "SELECT `yard`.`id`, `yard`.`acreage`, `yard`.`status`, `yard`.`address`, `yard`.`image_yard`, `yard`.`latitude`, `yard`.`longitude`, `yard`.`time_open`, `yard`.`time_close`, `yard`.`price`, `yard`.`accountId`, `slots`.`id` AS `slots.id`, `slots`.`times` AS `slots.times`, `slots`.`yardId` AS `slots.yardId` FROM `yards` AS `yard` LEFT OUTER JOIN `slots` AS `slots` ON `yard`.`id` = `slots`.`yardId` WHERE `yard`.`id` = '1';",
    parameters: undefined
  },
  sql: "SELECT `yard`.`id`, `yard`.`acreage`, `yard`.`status`, `yard`.`address`, `yard`.`image_yard`, `yard`.`latitude`, `yard`.`longitude`, `yard`.`time_open`, `yard`.`time_close`, `yard`.`price`, `yard`.`accountId`, `slots`.`id` AS `slots.id`, `slots`.`times` AS `slots.times`, `slots`.`yardId` AS `slots.yardId` FROM `yards` AS `yard` LEFT OUTER JOIN `slots` AS `slots` ON `yard`.`id` = `slots`.`yardId` WHERE `yard`.`id` = '1';",
  parameters: undefined,
  level: 'error',
  message: "Table 'carparkingdb2.yards' doesn't existTable 'carparkingdb2.yards' doesn't exist",
  stack: "SequelizeDatabaseError: Table 'carparkingdb2.yards' doesn't exist\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-12T08:27:57.500Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:12.013Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:13.865Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:26.540Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:47.844Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:10)',
  timestamp: '2019-11-12T08:59:28.747Z'
}
{
  level: 'error',
  message: "Cannot read property 'slots' of nullCannot read property 'slots' of null",
  stack: "TypeError: Cannot read property 'slots' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:41:26)',
  timestamp: '2019-11-12T09:26:34.160Z'
}
