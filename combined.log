{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:24:02.630Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:24:03.049Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:24:07.535Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:24:47.663Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:24:48.114Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:24:56.503Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:25:15.717Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:25:57.069Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:25:57.517Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:25:59.647Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:26:09.882Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:26:10.335Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'findOne' of undefined
      at login (D:\CarParking-BackEnd\controllers\authController.js:8:27)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:26:12.080Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:28:12.801Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:28:13.230Z'
}
{
  level: 'error',
  message: ReferenceError: Role is not defined
      at login (D:\CarParking-BackEnd\controllers\authController.js:15:18)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:137:13)
      at Route.dispatch (D:\CarParking-BackEnd\node_modules\express\lib\router\route.js:112:3)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:281:22
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at Function.handle (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:174:3)
      at router (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:47:12)
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13)
      at D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:284:7
      at Function.process_params (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:335:12)
      at next (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:275:10)
      at D:\CarParking-BackEnd\startup\routes.js:29:5
      at newFn (D:\CarParking-BackEnd\node_modules\express-async-errors\index.js:16:20)
      at Layer.handle [as handle_request] (D:\CarParking-BackEnd\node_modules\express\lib\router\layer.js:95:5)
      at trim_prefix (D:\CarParking-BackEnd\node_modules\express\lib\router\index.js:317:13),
  timestamp: '2019-11-03T05:28:17.336Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:28:44.065Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:28:44.712Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:28:52.074Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:29:16.791Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:29:17.249Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:29:20.015Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:30:08.454Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:30:08.875Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n\r\n        "username": "chehuy97",\r\n        "password": "123456",\r\n    }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-03T05:30:13.867Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:30:32.286Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:30:45.827Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:30:46.312Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:31:10.976Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:31:20.367Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:32:04.355Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:32:04.710Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:32:52.104Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:32:52.546Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:32:59.212Z'
}
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T05:33:28.222Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:33:42.902Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:33:43.286Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:35:09.088Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:35:09.482Z'
}
{
  level: 'error',
  message: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
      at ServerResponse.setHeader (_http_outgoing.js:485:11)
      at ServerResponse.header (D:\CarParking-BackEnd\node_modules\express\lib\response.js:771:10)
      at ServerResponse.send (D:\CarParking-BackEnd\node_modules\express\lib\response.js:170:12)
      at ServerResponse.json (D:\CarParking-BackEnd\node_modules\express\lib\response.js:267:15)
      at login (D:\CarParking-BackEnd\controllers\authController.js:40:9),
  timestamp: '2019-11-03T05:35:17.974Z'
}
{ level: 'error', timestamp: '2019-11-03T05:35:17.978Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T05:36:15.919Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T05:36:16.329Z'
}
{
  level: 'error',
  message: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
      at ServerResponse.setHeader (_http_outgoing.js:485:11)
      at ServerResponse.header (D:\CarParking-BackEnd\node_modules\express\lib\response.js:771:10)
      at ServerResponse.send (D:\CarParking-BackEnd\node_modules\express\lib\response.js:170:12)
      at ServerResponse.json (D:\CarParking-BackEnd\node_modules\express\lib\response.js:267:15)
      at login (D:\CarParking-BackEnd\controllers\authController.js:40:9),
  timestamp: '2019-11-03T05:36:20.436Z'
}
{ level: 'error', timestamp: '2019-11-03T05:36:20.446Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T06:53:36.469Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T06:53:37.015Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T06:53:41.198Z'
}
{ level: 'error', timestamp: '2019-11-03T06:53:41.220Z' }
{
  level: 'error',
  message: ReferenceError: user is not defined
      at login (D:\CarParking-BackEnd\controllers\authController.js:39:7),
  timestamp: '2019-11-03T06:53:44.185Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T06:54:15.206Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T06:54:15.656Z'
}
{
  level: 'error',
  message: Error [ERR_HTTP_HEADERS_SENT]: Cannot set headers after they are sent to the client
      at ServerResponse.setHeader (_http_outgoing.js:485:11)
      at ServerResponse.header (D:\CarParking-BackEnd\node_modules\express\lib\response.js:771:10)
      at ServerResponse.send (D:\CarParking-BackEnd\node_modules\express\lib\response.js:170:12)
      at ServerResponse.json (D:\CarParking-BackEnd\node_modules\express\lib\response.js:267:15)
      at login (D:\CarParking-BackEnd\controllers\authController.js:41:9),
  timestamp: '2019-11-03T06:54:21.732Z'
}
{ level: 'error', timestamp: '2019-11-03T06:54:21.735Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T06:54:40.313Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T06:54:40.766Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T06:56:05.069Z'
}
{ level: 'error', timestamp: '2019-11-03T06:56:05.080Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T06:56:22.797Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T06:56:23.234Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T06:56:24.816Z'
}
{ level: 'error', timestamp: '2019-11-03T06:56:24.821Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T06:56:49.086Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T06:56:49.445Z'
}
{
  level: 'error',
  message: Error: invalid expiresIn option for string payload
      at Object.module.exports [as sign] (D:\CarParking-BackEnd\node_modules\jsonwebtoken\sign.js:128:22)
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:23),
  timestamp: '2019-11-03T06:56:52.155Z'
}
{
  level: 'error',
  message: Error: invalid expiresIn option for string payload
      at Object.module.exports [as sign] (D:\CarParking-BackEnd\node_modules\jsonwebtoken\sign.js:128:22)
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:23),
  timestamp: '2019-11-03T07:03:58.223Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T07:04:52.501Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T07:04:52.912Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T07:05:13.765Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T07:05:14.186Z'
}
{
  name: 'SequelizeValidationError',
  errors: [
    ValidationErrorItem {
      message: 'account.username cannot be null',
      type: 'notNull Violation',
      path: 'username',
      value: null,
      origin: 'CORE',
      instance: account {
        dataValues: {
          status: true,
          id: null,
          username: undefined,
          password: undefined,
          name: undefined,
          birthday: undefined,
          gender: undefined,
          phone: undefined,
          image: 'gdausd4r2346hkdshfdksf',
          balance: 120000
        },
        _previousDataValues: {
          username: undefined,
          password: undefined,
          name: undefined,
          gender: undefined,
          phone: undefined,
          image: undefined,
          balance: undefined
        },
        _changed: {
          username: true,
          password: true,
          name: true,
          gender: true,
          phone: true,
          image: true,
          balance: true
        },
        _modelOptions: {
          timestamps: false,
          validate: {},
          freezeTableName: false,
          underscored: false,
          paranoid: false,
          rejectOnEmpty: false,
          whereCollection: {
            username: 'chehuy97',
            password: '123456',
            __roles: Literal {
              val: '( SELECT `account_role`.`accountId` FROM `account_roles` AS `account_role` INNER JOIN `roles` AS `role` ON `account_role`.`roleId` = `role`.`id` AND `role`.`id` = 3 WHERE (`account`.`id` = `account_role`.`accountId`) LIMIT 1 ) IS NOT NULL'
            },
            [Symbol(and)]: []
          },
          schema: null,
          schemaDelimiter: '',
          defaultScope: {},
          scopes: {},
          indexes: [],
          name: { plural: 'accounts', singular: 'account' },
          omitNull: false,
          charset: 'utf8mb4',
          collate: 'utf8mb4_unicode_520_ci',
          sequelize: Sequelize {
            options: {
              dialect: 'mysql',
              dialectModule: null,
              dialectModulePath: null,
              host: 'localhost',
              protocol: 'tcp',
              define: {
                charset: 'utf8mb4',
                collate: 'utf8mb4_unicode_520_ci',
                timestamps: false
              },
              query: {},
              sync: {},
              timezone: '+00:00',
              clientMinMessages: 'warning',
              standardConformingStrings: true,
              logging: [Function: bound consoleCall],
              omitNull: false,
              native: false,
              replication: false,
              ssl: undefined,
              pool: {},
              quoteIdentifiers: true,
              hooks: {},
              retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
              transactionType: 'DEFERRED',
              isolationLevel: null,
              databaseVersion: '10.4.6',
              typeValidation: false,
              benchmark: false,
              minifyAliases: false,
              logQueryParameters: false,
              username: 'root',
              password: '',
              database: 'carparkingdb2'
            },
            config: {
              database: 'carparkingdb2',
              username: 'root',
              password: null,
              host: 'localhost',
              port: 3306,
              pool: {},
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModule: null,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: undefined
            },
            dialect: MysqlDialect {
              sequelize: [Circular],
              connectionManager: ConnectionManager {
                sequelize: [Circular],
                config: {
                  database: 'carparkingdb2',
                  username: 'root',
                  password: null,
                  host: 'localhost',
                  port: 3306,
                  pool: {
                    max: 5,
                    min: 0,
                    idle: 10000,
                    acquire: 60000,
                    evict: 1000,
                    validate: [Function: bound _validate]
                  },
                  protocol: 'tcp',
                  native: false,
                  ssl: undefined,
                  replication: false,
                  dialectModule: null,
                  dialectModulePath: null,
                  keepDefaultTimezone: undefined,
                  dialectOptions: undefined
                },
                dialect: [Circular],
                versionPromise: null,
                dialectName: 'mysql',
                pool: Pool {
                  _factory: {
                    name: 'sequelize',
                    create: [Function: create],
                    destroy: [Function: destroy],
                    validate: [Function: bound _validate],
                    max: 5,
                    min: 0,
                    acquireTimeoutMillis: 60000,
                    idleTimeoutMillis: 10000,
                    reapIntervalMillis: 1000,
                    reapInterval: 1000,
                    log: false
                  },
                  _count: 0,
                  _draining: false,
                  _pendingAcquires: [],
                  _inUseObjects: [],
                  _availableObjects: [],
                  _removeIdleTimer: Timeout {
                    _idleTimeout: 1000,
                    _idlePrev: null,
                    _idleNext: null,
                    _idleStart: 2486706,
                    _onTimeout: [Function],
                    _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(refed)]: null,
                    [Symbol(asyncId)]: 651,
                    [Symbol(triggerId)]: 650
                  },
                  _removeIdleScheduled: false
                },
                lib: {
                  createConnection: [Function],
                  connect: [Function],
                  Connection: [Function: Connection],
                  createPool: [Function],
                  createPoolCluster: [Function],
                  createQuery: [Function: createQuery],
                  Pool: [Function: Pool],
                  createServer: [Function],
                  PoolConnection: [Function: PoolConnection] {
                    statementKey: [Function: statementKey]
                  },
                  escape: [Function: escape],
                  escapeId: [Function: escapeId],
                  format: [Function: format],
                  raw: [Function: raw],
                  createConnectionPromise: [Getter],
                  createPoolPromise: [Getter],
                  createPoolClusterPromise: [Getter],
                  Types: [Getter],
                  Charsets: [Getter],
                  CharsetToEncoding: [Getter],
                  setMaxParserCache: [Function],
                  clearParserCache: [Function]
                }
              },
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: [Circular],
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            queryInterface: QueryInterface {
              sequelize: [Circular],
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: MysqlDialect {
                  sequelize: [Circular],
                  connectionManager: ConnectionManager {
                    sequelize: [Circular],
                    config: {
                      database: 'carparkingdb2',
                      username: 'root',
                      password: null,
                      host: 'localhost',
                      port: 3306,
                      pool: {
                        max: 5,
                        min: 0,
                        idle: 10000,
                        acquire: 60000,
                        evict: 1000,
                        validate: [Function: bound _validate]
                      },
                      protocol: 'tcp',
                      native: false,
                      ssl: undefined,
                      replication: false,
                      dialectModule: null,
                      dialectModulePath: null,
                      keepDefaultTimezone: undefined,
                      dialectOptions: undefined
                    },
                    dialect: [Circular],
                    versionPromise: null,
                    dialectName: 'mysql',
                    pool: Pool {
                      _factory: {
                        name: 'sequelize',
                        create: [Function: create],
                        destroy: [Function: destroy],
                        validate: [Function: bound _validate],
                        max: 5,
                        min: 0,
                        acquireTimeoutMillis: 60000,
                        idleTimeoutMillis: 10000,
                        reapIntervalMillis: 1000,
                        reapInterval: 1000,
                        log: false
                      },
                      _count: 0,
                      _draining: false,
                      _pendingAcquires: [],
                      _inUseObjects: [],
                      _availableObjects: [],
                      _removeIdleTimer: Timeout {
                        _idleTimeout: 1000,
                        _idlePrev: null,
                        _idleNext: null,
                        _idleStart: 2486706,
                        _onTimeout: [Function],
                        _timerArgs: undefined,
                        _repeat: null,
                        _destroyed: false,
                        [Symbol(refed)]: null,
                        [Symbol(asyncId)]: 651,
                        [Symbol(triggerId)]: 650
                      },
                      _removeIdleScheduled: false
                    },
                    lib: {
                      createConnection: [Function],
                      connect: [Function],
                      Connection: [Function: Connection],
                      createPool: [Function],
                      createPoolCluster: [Function],
                      createQuery: [Function: createQuery],
                      Pool: [Function: Pool],
                      createServer: [Function],
                      PoolConnection: [Function: PoolConnection] {
                        statementKey: [Function: statementKey]
                      },
                      escape: [Function: escape],
                      escapeId: [Function: escapeId],
                      format: [Function: format],
                      raw: [Function: raw],
                      createConnectionPromise: [Getter],
                      createPoolPromise: [Getter],
                      createPoolClusterPromise: [Getter],
                      Types: [Getter],
                      Charsets: [Getter],
                      CharsetToEncoding: [Getter],
                      setMaxParserCache: [Function],
                      clearParserCache: [Function]
                    }
                  },
                  QueryGenerator: [Circular]
                },
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            models: {
              account: account,
              role: role,
              account_role: account_role,
              car: car,
              yard: yard,
              history: history,
              parking_now: parking_now,
              time_booking: time_booking
            },
            modelManager: ModelManager {
              models: [
                account,      role,
                account_role, car,
                yard,         history,
                parking_now,  time_booking
              ],
              sequelize: [Circular]
            },
            connectionManager: ConnectionManager {
              sequelize: [Circular],
              config: {
                database: 'carparkingdb2',
                username: 'root',
                password: null,
                host: 'localhost',
                port: 3306,
                pool: {
                  max: 5,
                  min: 0,
                  idle: 10000,
                  acquire: 60000,
                  evict: 1000,
                  validate: [Function: bound _validate]
                },
                protocol: 'tcp',
                native: false,
                ssl: undefined,
                replication: false,
                dialectModule: null,
                dialectModulePath: null,
                keepDefaultTimezone: undefined,
                dialectOptions: undefined
              },
              dialect: MysqlDialect {
                sequelize: [Circular],
                connectionManager: [Circular],
                QueryGenerator: MySQLQueryGenerator {
                  sequelize: [Circular],
                  options: {
                    dialect: 'mysql',
                    dialectModule: null,
                    dialectModulePath: null,
                    host: 'localhost',
                    protocol: 'tcp',
                    define: {
                      charset: 'utf8mb4',
                      collate: 'utf8mb4_unicode_520_ci',
                      timestamps: false
                    },
                    query: {},
                    sync: {},
                    timezone: '+00:00',
                    clientMinMessages: 'warning',
                    standardConformingStrings: true,
                    logging: [Function: bound consoleCall],
                    omitNull: false,
                    native: false,
                    replication: false,
                    ssl: undefined,
                    pool: {},
                    quoteIdentifiers: true,
                    hooks: {},
                    retry: {
                      max: 5,
                      match: [ 'SQLITE_BUSY: database is locked' ]
                    },
                    transactionType: 'DEFERRED',
                    isolationLevel: null,
                    databaseVersion: '10.4.6',
                    typeValidation: false,
                    benchmark: false,
                    minifyAliases: false,
                    logQueryParameters: false,
                    username: 'root',
                    password: '',
                    database: 'carparkingdb2'
                  },
                  dialect: 'mysql',
                  _dialect: [Circular],
                  OperatorMap: {
                    [Symbol(eq)]: '=',
                    [Symbol(ne)]: '!=',
                    [Symbol(gte)]: '>=',
                    [Symbol(gt)]: '>',
                    [Symbol(lte)]: '<=',
                    [Symbol(lt)]: '<',
                    [Symbol(not)]: 'IS NOT',
                    [Symbol(is)]: 'IS',
                    [Symbol(in)]: 'IN',
                    [Symbol(notIn)]: 'NOT IN',
                    [Symbol(like)]: 'LIKE',
                    [Symbol(notLike)]: 'NOT LIKE',
                    [Symbol(iLike)]: 'ILIKE',
                    [Symbol(notILike)]: 'NOT ILIKE',
                    [Symbol(startsWith)]: 'LIKE',
                    [Symbol(endsWith)]: 'LIKE',
                    [Symbol(substring)]: 'LIKE',
                    [Symbol(regexp)]: 'REGEXP',
                    [Symbol(notRegexp)]: 'NOT REGEXP',
                    [Symbol(iRegexp)]: '~*',
                    [Symbol(notIRegexp)]: '!~*',
                    [Symbol(between)]: 'BETWEEN',
                    [Symbol(notBetween)]: 'NOT BETWEEN',
                    [Symbol(overlap)]: '&&',
                    [Symbol(contains)]: '@>',
                    [Symbol(contained)]: '<@',
                    [Symbol(adjacent)]: '-|-',
                    [Symbol(strictLeft)]: '<<',
                    [Symbol(strictRight)]: '>>',
                    [Symbol(noExtendRight)]: '&<',
                    [Symbol(noExtendLeft)]: '&>',
                    [Symbol(any)]: 'ANY',
                    [Symbol(all)]: 'ALL',
                    [Symbol(and)]: ' AND ',
                    [Symbol(or)]: ' OR ',
                    [Symbol(col)]: 'COL',
                    [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                  },
                  typeValidation: undefined
                }
              },
              versionPromise: null,
              dialectName: 'mysql',
              pool: Pool {
                _factory: {
                  name: 'sequelize',
                  create: [Function: create],
                  destroy: [Function: destroy],
                  validate: [Function: bound _validate],
                  max: 5,
                  min: 0,
                  acquireTimeoutMillis: 60000,
                  idleTimeoutMillis: 10000,
                  reapIntervalMillis: 1000,
                  reapInterval: 1000,
                  log: false
                },
                _count: 0,
                _draining: false,
                _pendingAcquires: [],
                _inUseObjects: [],
                _availableObjects: [],
                _removeIdleTimer: Timeout {
                  _idleTimeout: 1000,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 2486706,
                  _onTimeout: [Function],
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: false,
                  [Symbol(refed)]: null,
                  [Symbol(asyncId)]: 651,
                  [Symbol(triggerId)]: 650
                },
                _removeIdleScheduled: false
              },
              lib: {
                createConnection: [Function],
                connect: [Function],
                Connection: [Function: Connection],
                createPool: [Function],
                createPoolCluster: [Function],
                createQuery: [Function: createQuery],
                Pool: [Function: Pool],
                createServer: [Function],
                PoolConnection: [Function: PoolConnection] {
                  statementKey: [Function: statementKey]
                },
                escape: [Function: escape],
                escapeId: [Function: escapeId],
                format: [Function: format],
                raw: [Function: raw],
                createConnectionPromise: [Getter],
                createPoolPromise: [Getter],
                createPoolClusterPromise: [Getter],
                Types: [Getter],
                Charsets: [Getter],
                CharsetToEncoding: [Getter],
                setMaxParserCache: [Function],
                clearParserCache: [Function]
              }
            },
            importCache: {}
          },
          hooks: {}
        },
        _options: {
          isNewRecord: true,
          _schema: null,
          _schemaDelimiter: '',
          attributes: undefined,
          include: undefined,
          raw: undefined,
          silent: undefined
        },
        isNewRecord: true
      },
      validatorKey: 'is_null',
      validatorName: null,
      validatorArgs: []
    },
    ValidationErrorItem {
      message: 'account.password cannot be null',
      type: 'notNull Violation',
      path: 'password',
      value: null,
      origin: 'CORE',
      instance: account {
        dataValues: {
          status: true,
          id: null,
          username: undefined,
          password: undefined,
          name: undefined,
          birthday: undefined,
          gender: undefined,
          phone: undefined,
          image: 'gdausd4r2346hkdshfdksf',
          balance: 120000
        },
        _previousDataValues: {
          username: undefined,
          password: undefined,
          name: undefined,
          gender: undefined,
          phone: undefined,
          image: undefined,
          balance: undefined
        },
        _changed: {
          username: true,
          password: true,
          name: true,
          gender: true,
          phone: true,
          image: true,
          balance: true
        },
        _modelOptions: {
          timestamps: false,
          validate: {},
          freezeTableName: false,
          underscored: false,
          paranoid: false,
          rejectOnEmpty: false,
          whereCollection: {
            username: 'chehuy97',
            password: '123456',
            __roles: Literal {
              val: '( SELECT `account_role`.`accountId` FROM `account_roles` AS `account_role` INNER JOIN `roles` AS `role` ON `account_role`.`roleId` = `role`.`id` AND `role`.`id` = 3 WHERE (`account`.`id` = `account_role`.`accountId`) LIMIT 1 ) IS NOT NULL'
            },
            [Symbol(and)]: []
          },
          schema: null,
          schemaDelimiter: '',
          defaultScope: {},
          scopes: {},
          indexes: [],
          name: { plural: 'accounts', singular: 'account' },
          omitNull: false,
          charset: 'utf8mb4',
          collate: 'utf8mb4_unicode_520_ci',
          sequelize: Sequelize {
            options: {
              dialect: 'mysql',
              dialectModule: null,
              dialectModulePath: null,
              host: 'localhost',
              protocol: 'tcp',
              define: {
                charset: 'utf8mb4',
                collate: 'utf8mb4_unicode_520_ci',
                timestamps: false
              },
              query: {},
              sync: {},
              timezone: '+00:00',
              clientMinMessages: 'warning',
              standardConformingStrings: true,
              logging: [Function: bound consoleCall],
              omitNull: false,
              native: false,
              replication: false,
              ssl: undefined,
              pool: {},
              quoteIdentifiers: true,
              hooks: {},
              retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
              transactionType: 'DEFERRED',
              isolationLevel: null,
              databaseVersion: '10.4.6',
              typeValidation: false,
              benchmark: false,
              minifyAliases: false,
              logQueryParameters: false,
              username: 'root',
              password: '',
              database: 'carparkingdb2'
            },
            config: {
              database: 'carparkingdb2',
              username: 'root',
              password: null,
              host: 'localhost',
              port: 3306,
              pool: {},
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModule: null,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: undefined
            },
            dialect: MysqlDialect {
              sequelize: [Circular],
              connectionManager: ConnectionManager {
                sequelize: [Circular],
                config: {
                  database: 'carparkingdb2',
                  username: 'root',
                  password: null,
                  host: 'localhost',
                  port: 3306,
                  pool: {
                    max: 5,
                    min: 0,
                    idle: 10000,
                    acquire: 60000,
                    evict: 1000,
                    validate: [Function: bound _validate]
                  },
                  protocol: 'tcp',
                  native: false,
                  ssl: undefined,
                  replication: false,
                  dialectModule: null,
                  dialectModulePath: null,
                  keepDefaultTimezone: undefined,
                  dialectOptions: undefined
                },
                dialect: [Circular],
                versionPromise: null,
                dialectName: 'mysql',
                pool: Pool {
                  _factory: {
                    name: 'sequelize',
                    create: [Function: create],
                    destroy: [Function: destroy],
                    validate: [Function: bound _validate],
                    max: 5,
                    min: 0,
                    acquireTimeoutMillis: 60000,
                    idleTimeoutMillis: 10000,
                    reapIntervalMillis: 1000,
                    reapInterval: 1000,
                    log: false
                  },
                  _count: 0,
                  _draining: false,
                  _pendingAcquires: [],
                  _inUseObjects: [],
                  _availableObjects: [],
                  _removeIdleTimer: Timeout {
                    _idleTimeout: 1000,
                    _idlePrev: null,
                    _idleNext: null,
                    _idleStart: 2486706,
                    _onTimeout: [Function],
                    _timerArgs: undefined,
                    _repeat: null,
                    _destroyed: false,
                    [Symbol(refed)]: null,
                    [Symbol(asyncId)]: 651,
                    [Symbol(triggerId)]: 650
                  },
                  _removeIdleScheduled: false
                },
                lib: {
                  createConnection: [Function],
                  connect: [Function],
                  Connection: [Function: Connection],
                  createPool: [Function],
                  createPoolCluster: [Function],
                  createQuery: [Function: createQuery],
                  Pool: [Function: Pool],
                  createServer: [Function],
                  PoolConnection: [Function: PoolConnection] {
                    statementKey: [Function: statementKey]
                  },
                  escape: [Function: escape],
                  escapeId: [Function: escapeId],
                  format: [Function: format],
                  raw: [Function: raw],
                  createConnectionPromise: [Getter],
                  createPoolPromise: [Getter],
                  createPoolClusterPromise: [Getter],
                  Types: [Getter],
                  Charsets: [Getter],
                  CharsetToEncoding: [Getter],
                  setMaxParserCache: [Function],
                  clearParserCache: [Function]
                }
              },
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: [Circular],
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            queryInterface: QueryInterface {
              sequelize: [Circular],
              QueryGenerator: MySQLQueryGenerator {
                sequelize: [Circular],
                options: {
                  dialect: 'mysql',
                  dialectModule: null,
                  dialectModulePath: null,
                  host: 'localhost',
                  protocol: 'tcp',
                  define: {
                    charset: 'utf8mb4',
                    collate: 'utf8mb4_unicode_520_ci',
                    timestamps: false
                  },
                  query: {},
                  sync: {},
                  timezone: '+00:00',
                  clientMinMessages: 'warning',
                  standardConformingStrings: true,
                  logging: [Function: bound consoleCall],
                  omitNull: false,
                  native: false,
                  replication: false,
                  ssl: undefined,
                  pool: {},
                  quoteIdentifiers: true,
                  hooks: {},
                  retry: {
                    max: 5,
                    match: [ 'SQLITE_BUSY: database is locked' ]
                  },
                  transactionType: 'DEFERRED',
                  isolationLevel: null,
                  databaseVersion: '10.4.6',
                  typeValidation: false,
                  benchmark: false,
                  minifyAliases: false,
                  logQueryParameters: false,
                  username: 'root',
                  password: '',
                  database: 'carparkingdb2'
                },
                dialect: 'mysql',
                _dialect: MysqlDialect {
                  sequelize: [Circular],
                  connectionManager: ConnectionManager {
                    sequelize: [Circular],
                    config: {
                      database: 'carparkingdb2',
                      username: 'root',
                      password: null,
                      host: 'localhost',
                      port: 3306,
                      pool: {
                        max: 5,
                        min: 0,
                        idle: 10000,
                        acquire: 60000,
                        evict: 1000,
                        validate: [Function: bound _validate]
                      },
                      protocol: 'tcp',
                      native: false,
                      ssl: undefined,
                      replication: false,
                      dialectModule: null,
                      dialectModulePath: null,
                      keepDefaultTimezone: undefined,
                      dialectOptions: undefined
                    },
                    dialect: [Circular],
                    versionPromise: null,
                    dialectName: 'mysql',
                    pool: Pool {
                      _factory: {
                        name: 'sequelize',
                        create: [Function: create],
                        destroy: [Function: destroy],
                        validate: [Function: bound _validate],
                        max: 5,
                        min: 0,
                        acquireTimeoutMillis: 60000,
                        idleTimeoutMillis: 10000,
                        reapIntervalMillis: 1000,
                        reapInterval: 1000,
                        log: false
                      },
                      _count: 0,
                      _draining: false,
                      _pendingAcquires: [],
                      _inUseObjects: [],
                      _availableObjects: [],
                      _removeIdleTimer: Timeout {
                        _idleTimeout: 1000,
                        _idlePrev: null,
                        _idleNext: null,
                        _idleStart: 2486706,
                        _onTimeout: [Function],
                        _timerArgs: undefined,
                        _repeat: null,
                        _destroyed: false,
                        [Symbol(refed)]: null,
                        [Symbol(asyncId)]: 651,
                        [Symbol(triggerId)]: 650
                      },
                      _removeIdleScheduled: false
                    },
                    lib: {
                      createConnection: [Function],
                      connect: [Function],
                      Connection: [Function: Connection],
                      createPool: [Function],
                      createPoolCluster: [Function],
                      createQuery: [Function: createQuery],
                      Pool: [Function: Pool],
                      createServer: [Function],
                      PoolConnection: [Function: PoolConnection] {
                        statementKey: [Function: statementKey]
                      },
                      escape: [Function: escape],
                      escapeId: [Function: escapeId],
                      format: [Function: format],
                      raw: [Function: raw],
                      createConnectionPromise: [Getter],
                      createPoolPromise: [Getter],
                      createPoolClusterPromise: [Getter],
                      Types: [Getter],
                      Charsets: [Getter],
                      CharsetToEncoding: [Getter],
                      setMaxParserCache: [Function],
                      clearParserCache: [Function]
                    }
                  },
                  QueryGenerator: [Circular]
                },
                OperatorMap: {
                  [Symbol(eq)]: '=',
                  [Symbol(ne)]: '!=',
                  [Symbol(gte)]: '>=',
                  [Symbol(gt)]: '>',
                  [Symbol(lte)]: '<=',
                  [Symbol(lt)]: '<',
                  [Symbol(not)]: 'IS NOT',
                  [Symbol(is)]: 'IS',
                  [Symbol(in)]: 'IN',
                  [Symbol(notIn)]: 'NOT IN',
                  [Symbol(like)]: 'LIKE',
                  [Symbol(notLike)]: 'NOT LIKE',
                  [Symbol(iLike)]: 'ILIKE',
                  [Symbol(notILike)]: 'NOT ILIKE',
                  [Symbol(startsWith)]: 'LIKE',
                  [Symbol(endsWith)]: 'LIKE',
                  [Symbol(substring)]: 'LIKE',
                  [Symbol(regexp)]: 'REGEXP',
                  [Symbol(notRegexp)]: 'NOT REGEXP',
                  [Symbol(iRegexp)]: '~*',
                  [Symbol(notIRegexp)]: '!~*',
                  [Symbol(between)]: 'BETWEEN',
                  [Symbol(notBetween)]: 'NOT BETWEEN',
                  [Symbol(overlap)]: '&&',
                  [Symbol(contains)]: '@>',
                  [Symbol(contained)]: '<@',
                  [Symbol(adjacent)]: '-|-',
                  [Symbol(strictLeft)]: '<<',
                  [Symbol(strictRight)]: '>>',
                  [Symbol(noExtendRight)]: '&<',
                  [Symbol(noExtendLeft)]: '&>',
                  [Symbol(any)]: 'ANY',
                  [Symbol(all)]: 'ALL',
                  [Symbol(and)]: ' AND ',
                  [Symbol(or)]: ' OR ',
                  [Symbol(col)]: 'COL',
                  [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                },
                typeValidation: undefined
              }
            },
            models: {
              account: account,
              role: role,
              account_role: account_role,
              car: car,
              yard: yard,
              history: history,
              parking_now: parking_now,
              time_booking: time_booking
            },
            modelManager: ModelManager {
              models: [
                account,      role,
                account_role, car,
                yard,         history,
                parking_now,  time_booking
              ],
              sequelize: [Circular]
            },
            connectionManager: ConnectionManager {
              sequelize: [Circular],
              config: {
                database: 'carparkingdb2',
                username: 'root',
                password: null,
                host: 'localhost',
                port: 3306,
                pool: {
                  max: 5,
                  min: 0,
                  idle: 10000,
                  acquire: 60000,
                  evict: 1000,
                  validate: [Function: bound _validate]
                },
                protocol: 'tcp',
                native: false,
                ssl: undefined,
                replication: false,
                dialectModule: null,
                dialectModulePath: null,
                keepDefaultTimezone: undefined,
                dialectOptions: undefined
              },
              dialect: MysqlDialect {
                sequelize: [Circular],
                connectionManager: [Circular],
                QueryGenerator: MySQLQueryGenerator {
                  sequelize: [Circular],
                  options: {
                    dialect: 'mysql',
                    dialectModule: null,
                    dialectModulePath: null,
                    host: 'localhost',
                    protocol: 'tcp',
                    define: {
                      charset: 'utf8mb4',
                      collate: 'utf8mb4_unicode_520_ci',
                      timestamps: false
                    },
                    query: {},
                    sync: {},
                    timezone: '+00:00',
                    clientMinMessages: 'warning',
                    standardConformingStrings: true,
                    logging: [Function: bound consoleCall],
                    omitNull: false,
                    native: false,
                    replication: false,
                    ssl: undefined,
                    pool: {},
                    quoteIdentifiers: true,
                    hooks: {},
                    retry: {
                      max: 5,
                      match: [ 'SQLITE_BUSY: database is locked' ]
                    },
                    transactionType: 'DEFERRED',
                    isolationLevel: null,
                    databaseVersion: '10.4.6',
                    typeValidation: false,
                    benchmark: false,
                    minifyAliases: false,
                    logQueryParameters: false,
                    username: 'root',
                    password: '',
                    database: 'carparkingdb2'
                  },
                  dialect: 'mysql',
                  _dialect: [Circular],
                  OperatorMap: {
                    [Symbol(eq)]: '=',
                    [Symbol(ne)]: '!=',
                    [Symbol(gte)]: '>=',
                    [Symbol(gt)]: '>',
                    [Symbol(lte)]: '<=',
                    [Symbol(lt)]: '<',
                    [Symbol(not)]: 'IS NOT',
                    [Symbol(is)]: 'IS',
                    [Symbol(in)]: 'IN',
                    [Symbol(notIn)]: 'NOT IN',
                    [Symbol(like)]: 'LIKE',
                    [Symbol(notLike)]: 'NOT LIKE',
                    [Symbol(iLike)]: 'ILIKE',
                    [Symbol(notILike)]: 'NOT ILIKE',
                    [Symbol(startsWith)]: 'LIKE',
                    [Symbol(endsWith)]: 'LIKE',
                    [Symbol(substring)]: 'LIKE',
                    [Symbol(regexp)]: 'REGEXP',
                    [Symbol(notRegexp)]: 'NOT REGEXP',
                    [Symbol(iRegexp)]: '~*',
                    [Symbol(notIRegexp)]: '!~*',
                    [Symbol(between)]: 'BETWEEN',
                    [Symbol(notBetween)]: 'NOT BETWEEN',
                    [Symbol(overlap)]: '&&',
                    [Symbol(contains)]: '@>',
                    [Symbol(contained)]: '<@',
                    [Symbol(adjacent)]: '-|-',
                    [Symbol(strictLeft)]: '<<',
                    [Symbol(strictRight)]: '>>',
                    [Symbol(noExtendRight)]: '&<',
                    [Symbol(noExtendLeft)]: '&>',
                    [Symbol(any)]: 'ANY',
                    [Symbol(all)]: 'ALL',
                    [Symbol(and)]: ' AND ',
                    [Symbol(or)]: ' OR ',
                    [Symbol(col)]: 'COL',
                    [Symbol(placeholder)]: '$$PLACEHOLDER$$'
                  },
                  typeValidation: undefined
                }
              },
              versionPromise: null,
              dialectName: 'mysql',
              pool: Pool {
                _factory: {
                  name: 'sequelize',
                  create: [Function: create],
                  destroy: [Function: destroy],
                  validate: [Function: bound _validate],
                  max: 5,
                  min: 0,
                  acquireTimeoutMillis: 60000,
                  idleTimeoutMillis: 10000,
                  reapIntervalMillis: 1000,
                  reapInterval: 1000,
                  log: false
                },
                _count: 0,
                _draining: false,
                _pendingAcquires: [],
                _inUseObjects: [],
                _availableObjects: [],
                _removeIdleTimer: Timeout {
                  _idleTimeout: 1000,
                  _idlePrev: null,
                  _idleNext: null,
                  _idleStart: 2486706,
                  _onTimeout: [Function],
                  _timerArgs: undefined,
                  _repeat: null,
                  _destroyed: false,
                  [Symbol(refed)]: null,
                  [Symbol(asyncId)]: 651,
                  [Symbol(triggerId)]: 650
                },
                _removeIdleScheduled: false
              },
              lib: {
                createConnection: [Function],
                connect: [Function],
                Connection: [Function: Connection],
                createPool: [Function],
                createPoolCluster: [Function],
                createQuery: [Function: createQuery],
                Pool: [Function: Pool],
                createServer: [Function],
                PoolConnection: [Function: PoolConnection] {
                  statementKey: [Function: statementKey]
                },
                escape: [Function: escape],
                escapeId: [Function: escapeId],
                format: [Function: format],
                raw: [Function: raw],
                createConnectionPromise: [Getter],
                createPoolPromise: [Getter],
                createPoolClusterPromise: [Getter],
                Types: [Getter],
                Charsets: [Getter],
                CharsetToEncoding: [Getter],
                setMaxParserCache: [Function],
                clearParserCache: [Function]
              }
            },
            importCache: {}
          },
          hooks: {}
        },
        _options: {
          isNewRecord: true,
          _schema: null,
          _schemaDelimiter: '',
          attributes: undefined,
          include: undefined,
          raw: undefined,
          silent: undefined
        },
        isNewRecord: true
      },
      validatorKey: 'is_null',
      validatorName: null,
      validatorArgs: []
    }
  ],
  level: 'error',
  message: 'notNull Violation: account.username cannot be null,\n' +
    'notNull Violation: account.password cannot be nullnotNull Violation: account.username cannot be null,\n' +
    'notNull Violation: account.password cannot be null',
  stack: 'SequelizeValidationError: notNull Violation: account.username cannot be null,\n' +
    'notNull Violation: account.password cannot be null\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\instance-validator.js:74:15\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at Promise._fulfill (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:673:18)\n' +
    '    at PromiseArray._resolve (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise_array.js:127:19)\n' +
    '    at PromiseArray._promiseFulfilled (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise_array.js:145:14)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:609:26)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-03T07:52:51.229Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:07:16.914Z'
}
{ level: 'error', timestamp: '2019-11-03T08:07:16.917Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:07:33.943Z'
}
{ level: 'error', timestamp: '2019-11-03T08:07:33.945Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T08:08:51.543Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T08:08:51.958Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T08:12:56.634Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T08:12:57.066Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:17:39.557Z'
}
{ level: 'error', timestamp: '2019-11-03T08:17:39.560Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:19:30.106Z'
}
{ level: 'error', timestamp: '2019-11-03T08:19:30.108Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T08:19:48.631Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T08:19:49.099Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:20:04.615Z'
}
{ level: 'error', timestamp: '2019-11-03T08:20:04.621Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:24:35.191Z'
}
{ level: 'error', timestamp: '2019-11-03T08:24:35.192Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:25:27.825Z'
}
{ level: 'error', timestamp: '2019-11-03T08:25:27.826Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:26:31.730Z'
}
{ level: 'error', timestamp: '2019-11-03T08:26:31.732Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:27:15.598Z'
}
{ level: 'error', timestamp: '2019-11-03T08:27:15.601Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:27:47.793Z'
}
{ level: 'error', timestamp: '2019-11-03T08:27:47.796Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:33:44.083Z'
}
{ level: 'error', timestamp: '2019-11-03T08:33:44.085Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:35:01.120Z'
}
{ level: 'error', timestamp: '2019-11-03T08:35:01.122Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:50:02.336Z'
}
{ level: 'error', timestamp: '2019-11-03T08:50:02.338Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:58:50.671Z'
}
{ level: 'error', timestamp: '2019-11-03T08:58:50.672Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:26.551Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:26.553Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:28.565Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:28.567Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:37.847Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:37.849Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T08:59:54.557Z'
}
{ level: 'error', timestamp: '2019-11-03T08:59:54.558Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:02:03.893Z'
}
{ level: 'error', timestamp: '2019-11-03T09:02:03.894Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:02:25.709Z'
}
{ level: 'error', timestamp: '2019-11-03T09:02:25.711Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:02:28.971Z'
}
{ level: 'error', timestamp: '2019-11-03T09:02:28.973Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:08:21.497Z'
}
{ level: 'error', timestamp: '2019-11-03T09:08:21.499Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:09:55.065Z'
}
{ level: 'error', timestamp: '2019-11-03T09:09:55.067Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:14:17.917Z'
}
{ level: 'error', timestamp: '2019-11-03T09:14:17.918Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:19:17.474Z'
}
{ level: 'error', timestamp: '2019-11-03T09:19:17.476Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:28:02.494Z'
}
{ level: 'error', timestamp: '2019-11-03T09:28:02.496Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:33:55.186Z'
}
{ level: 'error', timestamp: '2019-11-03T09:33:55.188Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T09:36:10.670Z'
}
{ level: 'error', timestamp: '2019-11-03T09:36:10.671Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T10:55:40.354Z'
}
{ level: 'error', timestamp: '2019-11-03T10:55:40.356Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:04:22.110Z'
}
{ level: 'error', timestamp: '2019-11-03T11:04:22.111Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:16:02.850Z'
}
{ level: 'error', timestamp: '2019-11-03T11:16:02.855Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:17:19.358Z'
}
{ level: 'error', timestamp: '2019-11-03T11:17:19.359Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:17:25.317Z'
}
{ level: 'error', timestamp: '2019-11-03T11:17:25.318Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:18:32.155Z'
}
{ level: 'error', timestamp: '2019-11-03T11:18:32.157Z' }
{
  level: 'error',
  message: Error: WHERE parameter "username" has invalid "undefined" value
      at MySQLQueryGenerator.whereItemQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2184:13)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2173:25
      at Array.forEach (<anonymous>)
      at MySQLQueryGenerator.whereItemsQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2171:35)
      at MySQLQueryGenerator.getWhereConditions (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:2583:19)
      at MySQLQueryGenerator.selectQuery (D:\CarParking-BackEnd\node_modules\sequelize\lib\dialects\abstract\query-generator.js:1315:28)
      at QueryInterface.select (D:\CarParking-BackEnd\node_modules\sequelize\lib\query-interface.js:1122:27)
      at D:\CarParking-BackEnd\node_modules\sequelize\lib\model.js:1757:34
      at tryCatcher (D:\CarParking-BackEnd\node_modules\bluebird\js\release\util.js:16:23)
      at Promise._settlePromiseFromHandler (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:547:31)
      at Promise._settlePromise (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:604:18)
      at Promise._settlePromise0 (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:649:10)
      at Promise._settlePromises (D:\CarParking-BackEnd\node_modules\bluebird\js\release\promise.js:729:18)
      at _drainQueueStep (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:93:12)
      at _drainQueue (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:86:9)
      at Async._drainQueues (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:102:5)
      at Immediate.Async.drainQueues [as _onImmediate] (D:\CarParking-BackEnd\node_modules\bluebird\js\release\async.js:15:14)
      at processImmediate (internal/timers.js:439:21),
  timestamp: '2019-11-03T11:18:57.093Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:19:02.796Z'
}
{ level: 'error', timestamp: '2019-11-03T11:19:02.799Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-03T11:20:15.957Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-03T11:20:16.360Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-03T11:20:34.144Z'
}
{ level: 'error', timestamp: '2019-11-03T11:20:34.148Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T02:04:39.398Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T02:04:39.867Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-04T02:12:51.327Z'
}
{ level: 'error', timestamp: '2019-11-04T02:12:51.331Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-04T02:13:00.249Z'
}
{ level: 'error', timestamp: '2019-11-04T02:13:00.251Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:24:36),
  timestamp: '2019-11-04T02:13:51.543Z'
}
{ level: 'error', timestamp: '2019-11-04T02:13:51.549Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T02:28:19.560Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T02:28:20.039Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T02:28:31.323Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T02:28:31.759Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T02:31:13.900Z'
}
{ level: 'error', timestamp: '2019-11-04T02:31:13.903Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T03:24:23.453Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T03:24:23.951Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T03:45:39.147Z'
}
{ level: 'error', timestamp: '2019-11-04T03:45:39.150Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T03:57:51.538Z'
}
{ level: 'error', timestamp: '2019-11-04T03:57:51.540Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T04:02:32.059Z'
}
{ level: 'error', timestamp: '2019-11-04T04:02:32.060Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T04:34:26.681Z'
}
{ level: 'error', timestamp: '2019-11-04T04:34:26.684Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T04:34:41.311Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T04:34:41.921Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T04:35:00.203Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T04:35:00.622Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T04:43:16.967Z'
}
{ level: 'error', timestamp: '2019-11-04T04:43:16.970Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T07:00:37.209Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T07:00:37.654Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T07:06:25.363Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T07:06:25.878Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-04T07:08:52.509Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-04T07:08:52.973Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:25:36),
  timestamp: '2019-11-04T07:49:50.303Z'
}
{ level: 'error', timestamp: '2019-11-04T07:49:50.306Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-05T01:53:04.696Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-05T01:53:06.756Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-05T01:53:23.607Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-05T01:53:26.822Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-05T10:21:50.545Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-05T10:21:51.127Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-05T10:26:10.415Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-05T10:26:10.896Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:03:58.347Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:04:02.904Z'
}
{
  message: 'notNull Violation: yard.point cannot be null',
  level: 'error',
  timestamp: '2019-11-07T01:04:03.999Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:04:14.059Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:04:14.416Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:04:51.563Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:04:51.946Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:22:51.338Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:22:51.734Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-07T01:22:51.809Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:23:34.496Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:23:34.883Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`slots`, CONSTRAINT `slots_ibfk_1` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-07T01:23:34.961Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:25:01.922Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:25:02.327Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-07T01:25:02.403Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:25:16.436Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:25:16.837Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-07T01:25:16.927Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:26:14.107Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:26:14.498Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`slots`, CONSTRAINT `slots_ibfk_1` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-07T01:26:14.570Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:26:49.332Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:26:49.740Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:36:44.902Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:36:45.331Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:37:03.181Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:37:05.850Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T01:37:16.112Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T01:37:22.316Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:13:00.449Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:13:00.840Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:15:04.856Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:15:05.262Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:15:15.744Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:15:16.143Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:15:29.689Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:15:30.090Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:16:44.882Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:16:45.317Z'
}
{
  level: 'error',
  message: 'body is not definedbody is not defined',
  stack: 'ReferenceError: body is not defined\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:32:28)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-07T02:17:13.640Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:17:41.142Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:17:41.574Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:20:01.058Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:20:01.944Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:20:02.271Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:22:49.789Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:22:52.091Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:22:56.274Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:22:59.171Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to account!slot is not associated to account!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to account!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T02:23:01.968Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to account!slot is not associated to account!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to account!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T02:23:03.644Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:23:52.934Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:23:53.379Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:24:38.473Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:24:38.898Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:24:50.441Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:24:50.843Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T02:28:31.431Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T02:28:31.865Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:38:48.950Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:38:49.426Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:39:50.137Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:39:50.563Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:44:16.740Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:44:17.178Z'
}
{
  message: 'notNull Violation: yard.time_open cannot be null',
  level: 'error',
  timestamp: '2019-11-07T03:44:17.234Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:44:59.946Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:45:00.381Z'
}
{
  message: 'notNull Violation: yard.time_open cannot be null,\n' +
    'notNull Violation: yard.time_close cannot be null',
  level: 'error',
  timestamp: '2019-11-07T03:45:00.473Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:45:18.595Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:45:19.003Z'
}
{
  message: 'notNull Violation: yard.time_open cannot be null,\n' +
    'notNull Violation: yard.time_close cannot be null',
  level: 'error',
  timestamp: '2019-11-07T03:45:19.062Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:45:35.154Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:45:35.618Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:46:23.766Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:46:24.175Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T03:59:32.496Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T03:59:32.923Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T04:05:51.094Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T04:05:51.503Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T06:25:27.818Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T06:25:28.294Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T06:30:29.496Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T06:30:30.097Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T06:30:37.989Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T06:30:38.500Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T06:37:16.013Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T06:37:16.521Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T06:41:58.030Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T06:41:58.441Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:05:30.418Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T07:05:30.834Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:14:11.286Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T07:14:11.739Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:53:53.875Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `time0_1` TINYINT(1) NOT NULL DEFAULT 0, `time1_2` TINYINT(1) NOT N' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:53:54.452Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:55:31.214Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `time0_1` TINYINT(1) NOT NULL DEFAULT 0, `time1_2` TINYINT(1) NOT N' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:55:31.520Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:55:44.011Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:55:44.270Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:56:55.094Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:56:55.364Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:59:29.287Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:59:29.604Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T07:59:44.483Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T07:59:44.730Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:00:08.526Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:00:08.778Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:00:25.047Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:00:25.315Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:00:36.557Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:00:37.048Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:00:55.252Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:00:55.677Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:01:06.576Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:01:06.886Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:01:41.230Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:01:41.496Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:04:24.261Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:04:24.552Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:18:55.349Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:18:55.864Z'
}
{
  message: 'string violation: time cannot be an array or an object',
  level: 'error',
  timestamp: '2019-11-07T08:18:55.955Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:22:52.714Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:22:53.116Z'
}
{
  message: 'string violation: time cannot be an array or an object',
  level: 'error',
  timestamp: '2019-11-07T08:22:53.175Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:22:55.353Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[] NOT NULL, `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERE' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:22:55.648Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:23:44.933Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:23:45.202Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:23:55.320Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:23:55.630Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:24:19.216Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:24:19.500Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:24:24.818Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:24:25.104Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:24:30.976Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:24:31.246Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:25:18.290Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:25:18.599Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:26:38.633Z'
}
{
  message: "Unknown database 'carparkingdb2'",
  level: 'error',
  timestamp: '2019-11-07T08:26:38.688Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:26:57.351Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], `yardId` INTEGER, PRIMARY KEY (`id`), FOREIGN KEY (`yardId`) REFERENCES `yar' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:26:57.597Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:28:27.741Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:28:28.038Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:29:23.720Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:29:23.998Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:29:34.624Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:29:34.886Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:29:43.928Z'
}
{
  message: "You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '[], PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_un' at line 1",
  level: 'error',
  timestamp: '2019-11-07T08:29:44.200Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:37:37.050Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:37:37.477Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:38:17.280Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:38:17.844Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:38:32.717Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:38:33.133Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:38:51.119Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:38:51.589Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:39:21.287Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:39:22.684Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:39:31.944Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:39:32.390Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:39:44.115Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:39:44.519Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:40:03.360Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:40:03.764Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:40:17.356Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:40:17.762Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:40:32.807Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:40:33.261Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:40:49.566Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:40:49.984Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:41:10.306Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:41:10.704Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:47:58.298Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:47:58.719Z'
}
{
  message: 'value.join is not a function',
  level: 'error',
  timestamp: '2019-11-07T08:47:58.978Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:48:08.850Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:48:11.323Z'
}
{
  message: 'value.join is not a function',
  level: 'error',
  timestamp: '2019-11-07T08:48:11.694Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:49:08.270Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:49:08.743Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:52:01.492Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:52:01.891Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:52:42.430Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:52:42.956Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to yard!slot is not associated to yard!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to yard!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T08:52:54.574Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to yard!slot is not associated to yard!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to yard!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T08:52:59.294Z'
}
{
  name: 'SequelizeEagerLoadingError',
  level: 'error',
  message: 'slot is not associated to yard!slot is not associated to yard!',
  stack: 'SequelizeEagerLoadingError: slot is not associated to yard!\n' +
    '    at Function._getIncludedAssociation (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:715:13)\n' +
    '    at Function._validateIncludedElement (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:619:53)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:516:37\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at Function._validateIncludedElements (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:511:39)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1726:14\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-07T08:53:02.861Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:53:37.650Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:53:38.147Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:54:22.646Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:54:23.204Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:58:30.934Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:58:31.450Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T08:59:07.841Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T08:59:08.354Z'
}
{
  level: 'error',
  message: 'this.getDataValue(...).split is not a functionthis.getDataValue(...).split is not a function',
  stack: 'TypeError: this.getDataValue(...).split is not a function\n' +
    '    at model.get (D:\\CarParking-BackEnd\\models\\slot.js:11:43)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3509:41)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3543:33)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:64\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:39)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3553:31)\n' +
    '    at model.toJSON (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:4409:12)\n' +
    '    at JSON.stringify (<anonymous>)\n' +
    '    at stringify (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:1123:12)\n' +
    '    at ServerResponse.json (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:260:14)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:36:9)',
  timestamp: '2019-11-07T08:59:21.355Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T09:00:03.991Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T09:00:04.545Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T09:02:12.285Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T09:02:12.859Z'
}
{
  level: 'error',
  message: 'this.getDataValue(...).split is not a functionthis.getDataValue(...).split is not a function',
  stack: 'TypeError: this.getDataValue(...).split is not a function\n' +
    '    at model.get (D:\\CarParking-BackEnd\\models\\slot.js:11:43)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3509:41)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3543:33)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:64\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3514:39)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3553:31)\n' +
    '    at model.toJSON (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:4409:12)\n' +
    '    at JSON.stringify (<anonymous>)\n' +
    '    at stringify (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:1123:12)\n' +
    '    at ServerResponse.json (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:260:14)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:36:9)',
  timestamp: '2019-11-07T09:02:17.297Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T09:02:58.521Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T09:02:59.086Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T10:15:22.509Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T10:15:22.981Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T10:42:18.383Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T10:42:18.814Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T10:43:43.100Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T10:43:43.538Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T10:57:40.965Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T10:57:41.420Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T11:00:18.887Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T11:00:19.540Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T11:01:28.705Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T11:01:29.110Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T11:01:32.073Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T11:01:32.535Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-07T11:01:53.720Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-07T11:01:54.158Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-08T03:50:18.854Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-08T03:50:25.588Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-08T06:19:59.998Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-08T06:20:00.580Z'
}
{
  message: 'notNull Violation: yard.price cannot be null',
  level: 'error',
  timestamp: '2019-11-08T06:20:00.684Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-08T06:20:26.946Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-08T06:20:27.364Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-08T07:11:12.095Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-08T07:11:12.584Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-10T04:57:51.329Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-10T04:57:51.986Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-10T05:56:57.013Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-10T05:56:57.553Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-10T06:01:15.381Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-10T06:01:15.906Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-10T07:32:32.928Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-10T07:32:33.360Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`slots`, CONSTRAINT `slots_ibfk_1` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-10T07:32:33.456Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-10T07:32:53.340Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-10T07:32:53.746Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-10T07:36:13.442Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-10T07:36:13.866Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-10T08:23:51.166Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-10T08:23:51.576Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-10T08:32:31.118Z'
}
{ level: 'error', timestamp: '2019-11-10T08:32:31.121Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-10T08:33:33.543Z'
}
{ level: 'error', timestamp: '2019-11-10T08:33:33.545Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-10T10:16:38.099Z'
}
{ level: 'error', timestamp: '2019-11-10T10:16:38.110Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T01:57:25.893Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T01:57:26.346Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T02:13:53.509Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T02:13:53.931Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T02:33:52.841Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T02:33:53.388Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T03:43:06.105Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T03:43:06.607Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-11T07:30:17.287Z'
}
{ level: 'error', timestamp: '2019-11-11T07:30:17.290Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:25:00.829Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:25:01.243Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:27:50.223Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:27:50.610Z'
}
{
  level: 'error',
  message: 'Car is not definedCar is not defined',
  stack: 'ReferenceError: Car is not defined\n' +
    '    at show_account_detail (D:\\CarParking-BackEnd\\controllers\\accountController.js:22:18)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-11T08:29:36.969Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:30:30.110Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:30:30.592Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:30:53.176Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:30:53.611Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:45:03.708Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:45:04.151Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:48:19.105Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:48:19.534Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:51:07.838Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:51:08.235Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:53:54.168Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:53:54.583Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T08:56:30.203Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T08:56:30.600Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T09:06:04.042Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T09:06:04.471Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T09:09:02.434Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T09:09:02.828Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T09:16:07.683Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T09:16:08.238Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T09:20:33.844Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T09:20:34.286Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-11T09:20:48.442Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-11T09:20:48.837Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T01:30:10.255Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T01:30:10.759Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T02:14:18.419Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T02:14:18.892Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T02:14:24.314Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T02:14:25.361Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T02:14:25.792Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T02:15:35.740Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T02:15:36.200Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T03:06:11.890Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T03:06:12.422Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:30:23.018Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:30:23.482Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:35:22.405Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:35:22.819Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:42:33.246Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:42:33.757Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:46:38.246Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:46:38.675Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:51:07.042Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:51:07.458Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:53:01.703Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:53:02.114Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:54:55.691Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:54:56.136Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:57:29.790Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:57:30.234Z'
}
{
  message: 'Validation error',
  level: 'error',
  timestamp: '2019-11-12T06:57:30.378Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T06:58:36.899Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T06:58:42.714Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:00:50.679Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:00:51.094Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:07:15.051Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:07:15.451Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:07:39.900Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:07:40.344Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:14:58.276Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:14:58.660Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:16:56.378Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:16:56.819Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:20:49.850Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:20:50.256Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:22:20.394Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:22:20.802Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:23:14.887Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:23:15.335Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:23:54.632Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:23:55.046Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:24:57.138Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:24:57.555Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:32:24.209Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:32:24.610Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:33:27.922Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:33:28.328Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:36:55.668Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:36:56.077Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:39:11.076Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:39:11.476Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:39:23.473Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:39:23.865Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:39:31.502Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:39:31.938Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:39:41.168Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:39:41.587Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:40:02.453Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:40:02.845Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:40:19.612Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:40:20.067Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:40:30.148Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:40:30.570Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:40:43.953Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:40:44.346Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:41:29.400Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:41:29.830Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:41:41.637Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:41:42.054Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:42:21.791Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:42:22.264Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:42:36.264Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:42:36.873Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:43:09.942Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:43:10.367Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:43:37.536Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:43:37.967Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:43:59.982Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:44:00.425Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:44:14.364Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:44:14.756Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:44:57.236Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:44:57.654Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:45:03.407Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:45:08.195Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:45:29.979Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:45:30.374Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:45:33.486Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:45:33.902Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:45:38.637Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:45:39.070Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:45:44.944Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:45:45.358Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:46:03.916Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:46:04.311Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:46:17.048Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:46:17.445Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:47:40.404Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:47:40.810Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:48:10.552Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:48:10.957Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:49:53.688Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:49:54.098Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:52:23.947Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:52:24.388Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:52:59.680Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:53:00.107Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:53:18.716Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:53:20.671Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:53:43.777Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:53:45.269Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:53:48.129Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:53:48.522Z'
}
{
  level: 'error',
  message: 'value.join is not a functionvalue.join is not a function',
  stack: 'TypeError: value.join is not a function\n' +
    '    at model.set (D:\\CarParking-BackEnd\\models\\slot.js:14:42)\n' +
    '    at model.set (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3653:32)\n' +
    '    at model.funcs.<computed> (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1103:25)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:44:25)',
  timestamp: '2019-11-12T07:53:50.745Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:54:38.321Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:54:38.761Z'
}
{
  level: 'error',
  message: 'value.join is not a functionvalue.join is not a function',
  stack: 'TypeError: value.join is not a function\n' +
    '    at model.set (D:\\CarParking-BackEnd\\models\\slot.js:14:42)\n' +
    '    at model.set (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3653:32)\n' +
    '    at model.funcs.<computed> (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1103:25)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:44:26)',
  timestamp: '2019-11-12T07:54:41.848Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:54:58.182Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:54:58.603Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:55:19.106Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:55:19.512Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:55:22.554Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:55:23.027Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:56:00.035Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:56:00.472Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:56:11.848Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:56:12.261Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:56:25.777Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:56:26.249Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T07:58:01.087Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T07:58:01.466Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:01:00.677Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:01:01.067Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:01:41.415Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:01:41.823Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:05:44.316Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:05:44.694Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:07:04.502Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:07:04.925Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:07:18.256Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:07:18.652Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:09:24.151Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:09:24.572Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:09:53.933Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:09:54.333Z'
}
{
  level: 'error',
  message: 'yard.slots[0].times[7].set is not a functionyard.slots[0].times[7].set is not a function',
  stack: 'TypeError: yard.slots[0].times[7].set is not a function\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:71:28)',
  timestamp: '2019-11-12T08:10:00.152Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:13:08.058Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:13:08.510Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:13:38.617Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:13:39.053Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:13:46.416Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:13:46.846Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:14:49.305Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:14:49.756Z'
}
{
  message: 'notNull Violation: history.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-12T08:14:49.927Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:15:50.766Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:15:51.153Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:17:24.590Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:17:25.057Z'
}
{
  level: 'error',
  message: 'histories is not definedhistories is not defined',
  stack: 'ReferenceError: histories is not defined\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:43:14)',
  timestamp: '2019-11-12T08:17:27.162Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:17:32.985Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:17:33.385Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:17:57.269Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:17:57.650Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:18:00.091Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:18:00.478Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:19:34.609Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:19:35.023Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:25:04.077Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:25:04.471Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:27:21.068Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:27:21.480Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:27:33.685Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:27:34.147Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:27:55.868Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Table 'carparkingdb2.yards' doesn't exist
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_NO_SUCH_TABLE',
    errno: 1146,
    sqlState: '42S02',
    sqlMessage: "Table 'carparkingdb2.yards' doesn't exist",
    sql: "SELECT `yard`.`id`, `yard`.`acreage`, `yard`.`status`, `yard`.`address`, `yard`.`image_yard`, `yard`.`latitude`, `yard`.`longitude`, `yard`.`time_open`, `yard`.`time_close`, `yard`.`price`, `yard`.`accountId`, `slots`.`id` AS `slots.id`, `slots`.`times` AS `slots.times`, `slots`.`yardId` AS `slots.yardId` FROM `yards` AS `yard` LEFT OUTER JOIN `slots` AS `slots` ON `yard`.`id` = `slots`.`yardId` WHERE `yard`.`id` = '1';",
    parameters: undefined
  },
  original: Error: Table 'carparkingdb2.yards' doesn't exist
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_NO_SUCH_TABLE',
    errno: 1146,
    sqlState: '42S02',
    sqlMessage: "Table 'carparkingdb2.yards' doesn't exist",
    sql: "SELECT `yard`.`id`, `yard`.`acreage`, `yard`.`status`, `yard`.`address`, `yard`.`image_yard`, `yard`.`latitude`, `yard`.`longitude`, `yard`.`time_open`, `yard`.`time_close`, `yard`.`price`, `yard`.`accountId`, `slots`.`id` AS `slots.id`, `slots`.`times` AS `slots.times`, `slots`.`yardId` AS `slots.yardId` FROM `yards` AS `yard` LEFT OUTER JOIN `slots` AS `slots` ON `yard`.`id` = `slots`.`yardId` WHERE `yard`.`id` = '1';",
    parameters: undefined
  },
  sql: "SELECT `yard`.`id`, `yard`.`acreage`, `yard`.`status`, `yard`.`address`, `yard`.`image_yard`, `yard`.`latitude`, `yard`.`longitude`, `yard`.`time_open`, `yard`.`time_close`, `yard`.`price`, `yard`.`accountId`, `slots`.`id` AS `slots.id`, `slots`.`times` AS `slots.times`, `slots`.`yardId` AS `slots.yardId` FROM `yards` AS `yard` LEFT OUTER JOIN `slots` AS `slots` ON `yard`.`id` = `slots`.`yardId` WHERE `yard`.`id` = '1';",
  parameters: undefined,
  level: 'error',
  message: "Table 'carparkingdb2.yards' doesn't existTable 'carparkingdb2.yards' doesn't exist",
  stack: "SequelizeDatabaseError: Table 'carparkingdb2.yards' doesn't exist\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-12T08:27:57.500Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:28:01.291Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:30:19.216Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:30:19.619Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:30:23.585Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:30:23.992Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:35:03.199Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:35:03.619Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:35:41.289Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:35:41.763Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:40:41.920Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:40:42.306Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:41:47.190Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:41:47.633Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:42:02.968Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:42:03.357Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:42:27.856Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:42:28.270Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:43:01.208Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:43:03.004Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:43:05.978Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:43:08.629Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:12.013Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:13.865Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:43:23.997Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:43:24.375Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:26.540Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:43:44.016Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:43:44.406Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:18)',
  timestamp: '2019-11-12T08:43:47.844Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:44:21.785Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:44:22.253Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:44:23.353Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:44:23.787Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:45:06.830Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:45:07.317Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:45:09.039Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:45:09.457Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:45:27.946Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:45:28.347Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:54:59.490Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:54:59.930Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T08:59:26.085Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T08:59:26.534Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:55:10)',
  timestamp: '2019-11-12T08:59:28.747Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:06:14.980Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:06:15.415Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:07:54.768Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:07:55.160Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:08:59.239Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:08:59.633Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:16:23.226Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:16:23.677Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:18:05.107Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:18:05.590Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:21:30.330Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:21:30.842Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:22:37.241Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:22:37.741Z'
}
{
  level: 'error',
  message: "Cannot read property 'slots' of nullCannot read property 'slots' of null",
  stack: "TypeError: Cannot read property 'slots' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:41:26)',
  timestamp: '2019-11-12T09:26:34.160Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:26:54.843Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:26:55.292Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:27:57.207Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:27:57.631Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:34:01.607Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:34:02.111Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:40:33.880Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:40:34.566Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:43:16.211Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:43:16.670Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T09:47:20.370Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T09:47:20.853Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T10:10:16.762Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T10:10:17.152Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-12T10:12:42.633Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-12T10:12:43.101Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T01:36:58.211Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T01:36:58.661Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T01:44:04.000Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T01:44:04.432Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:06:01.704Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:06:02.133Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:15:53.033Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:15:53.494Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:16:07.098Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:16:07.541Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:21:27.800Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:21:28.235Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:23:08.099Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:23:08.532Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:26:56.179Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:26:56.716Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:34:22.022Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:34:22.425Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:40:54.738Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:40:55.126Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:42:19.084Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:42:19.532Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n' +
    '\t"time_come": 11,\n' +
    '\t"time_leave": 13,\n' +
    '\t"price":30000,\n' +
    '\t"slotId":"2a1",\n' +
    '\t"car_number":"HT26VB1986"\n' +
    '\t"accountId":4,\n' +
    '\t"yardId":1,\n' +
    '}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-11-13T02:45:38.025Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:48:40.048Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:48:40.545Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:51:32.281Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:51:32.701Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:52:02.665Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:52:03.084Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:52:21.957Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:52:22.424Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:52:27.432Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:52:27.822Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T02:52:48.717Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T02:52:49.166Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T03:08:20.232Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T03:08:20.716Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`histories`, CONSTRAINT `histories_ibfk_2` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-13T04:21:40.480Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T04:24:45.719Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T04:24:47.956Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T04:24:56.322Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T04:24:56.754Z'
}
{
  level: 'error',
  message: "Cannot read property 'slots' of nullCannot read property 'slots' of null",
  stack: "TypeError: Cannot read property 'slots' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:41:26)',
  timestamp: '2019-11-13T07:04:48.309Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T07:52:51.495Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T07:52:51.895Z'
}
{
  level: 'error',
  message: "Cannot read property 'slots' of nullCannot read property 'slots' of null",
  stack: "TypeError: Cannot read property 'slots' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:41:26)',
  timestamp: '2019-11-13T08:55:55.298Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T09:18:43.836Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T09:18:44.233Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T09:44:02.592Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T09:44:03.067Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-13T09:47:18.166Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-13T09:47:18.592Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-13T10:02:05.549Z'
}
{ level: 'error', timestamp: '2019-11-13T10:02:05.553Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T01:24:44.984Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T01:24:45.555Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:02:36.563Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:02:37.310Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:28:26.313Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:28:26.773Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:30:34.260Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:30:34.692Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:31:12.321Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:31:12.761Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:33:58.002Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:33:58.473Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:35:20.458Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:35:20.878Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:36:45.143Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:36:45.527Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:39:41.617Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:39:42.028Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:39:45.712Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:39:46.108Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:53:41.098Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:53:41.484Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:54:21.677Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:54:22.091Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:57:57.702Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:57:58.110Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T03:59:32.657Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T03:59:33.050Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:04:06.825Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:04:07.242Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:12:27.354Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:12:27.813Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:20:23.389Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:20:23.776Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:21:27.614Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:21:27.997Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:21:54.412Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:21:54.794Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:22:19.301Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:22:19.694Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:22:53.953Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:22:54.356Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:26:07.508Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:26:10.052Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:32:41.697Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T04:32:42.117Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-14T04:33:10.536Z'
}
{ level: 'error', timestamp: '2019-11-14T04:33:10.540Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-14T04:33:14.379Z'
}
{ level: 'error', timestamp: '2019-11-14T04:33:14.381Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T04:45:54.831Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T04:45:54.956Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:10:37.074Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T05:10:37.135Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:11:29.008Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T05:11:29.061Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:14:07.075Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T05:14:07.132Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:14:15.780Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T05:14:15.835Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:15:16.015Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T05:15:16.076Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:15:20.663Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T05:15:20.717Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:16:05.217Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-14T05:16:05.284Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:18:48.832Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T05:18:49.179Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:18:54.294Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T05:18:54.749Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:21:46.971Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T05:21:47.455Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:28:00.621Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T05:28:01.046Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T05:32:44.104Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T05:32:44.560Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T09:20:52.033Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T09:20:52.511Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-14T10:10:04.761Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-14T10:10:05.214Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-15T03:51:28.671Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-15T03:51:29.222Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-15T03:55:14.819Z'
}
{ level: 'error', timestamp: '2019-11-15T03:55:14.824Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-15T04:24:08.149Z'
}
{ level: 'error', timestamp: '2019-11-15T04:24:08.151Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-15T04:31:15.427Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-15T04:31:16.025Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-15T04:32:14.473Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-15T04:32:14.925Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-15T04:32:25.157Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-15T04:32:25.642Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-15T04:47:21.759Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-15T04:47:22.201Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-15T13:25:53.212Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-15T13:25:53.848Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T03:28:31.538Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-16T03:28:33.641Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T03:28:41.336Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T03:28:41.848Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T03:29:31.716Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T03:29:32.160Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T03:29:44.693Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T03:29:45.106Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T03:37:00.410Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T03:37:00.853Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:04:28.064Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:04:28.499Z'
}
{
  message: 'notNull Violation: yard.slot cannot be null',
  level: 'error',
  timestamp: '2019-11-16T04:04:28.592Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:06:47.428Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:06:47.866Z'
}
{
  level: 'error',
  message: "Cannot read property 'split' of undefinedCannot read property 'split' of undefined",
  stack: "TypeError: Cannot read property 'split' of undefined\n" +
    '    at model.get (D:\\CarParking-BackEnd\\models\\yard.js:49:42)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3509:41)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3543:33)\n' +
    '    at model.toJSON (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:4409:12)\n' +
    '    at JSON.stringify (<anonymous>)\n' +
    '    at stringify (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:1123:12)\n' +
    '    at ServerResponse.json (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:260:14)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:75:9)',
  timestamp: '2019-11-16T04:06:55.485Z'
}
{
  level: 'error',
  message: "Cannot read property 'split' of undefinedCannot read property 'split' of undefined",
  stack: "TypeError: Cannot read property 'split' of undefined\n" +
    '    at model.get (D:\\CarParking-BackEnd\\models\\yard.js:49:42)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3509:41)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3543:33)\n' +
    '    at model.toJSON (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:4409:12)\n' +
    '    at JSON.stringify (<anonymous>)\n' +
    '    at stringify (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:1123:12)\n' +
    '    at ServerResponse.json (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:260:14)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:75:9)',
  timestamp: '2019-11-16T04:06:55.620Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:08:04.417Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:08:04.864Z'
}
{
  level: 'error',
  message: "Cannot read property 'split' of undefinedCannot read property 'split' of undefined",
  stack: "TypeError: Cannot read property 'split' of undefined\n" +
    '    at model.get (D:\\CarParking-BackEnd\\models\\yard.js:49:42)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3509:41)\n' +
    '    at model.get (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3543:33)\n' +
    '    at model.toJSON (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:4409:12)\n' +
    '    at JSON.stringify (<anonymous>)\n' +
    '    at stringify (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:1123:12)\n' +
    '    at ServerResponse.json (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\response.js:260:14)\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:75:9)',
  timestamp: '2019-11-16T04:08:19.068Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:09:04.515Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:09:04.935Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:09:38.674Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:09:39.050Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:11:16.042Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:11:16.464Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:20:44.848Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:20:45.286Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:21:02.514Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:21:03.108Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:49:29.759Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:49:30.207Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:54:51.827Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:54:52.251Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T04:55:28.463Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T04:55:28.914Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T06:31:53.566Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T06:31:53.984Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T06:32:25.007Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T06:32:25.491Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T06:36:29.087Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T06:36:29.560Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T06:36:49.300Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T06:36:49.737Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T06:37:14.199Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T06:37:14.647Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T09:55:20.450Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T09:55:20.861Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T09:57:30.275Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T09:57:30.701Z'
}
{
  level: 'error',
  message: "Cannot read property 'length' of undefinedCannot read property 'length' of undefined",
  stack: "TypeError: Cannot read property 'length' of undefined\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:43:32)',
  timestamp: '2019-11-16T09:57:33.891Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T09:57:56.356Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T09:57:56.837Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T09:58:07.113Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T09:58:07.661Z'
}
{
  level: 'error',
  message: "Cannot read property 'length' of undefinedCannot read property 'length' of undefined",
  stack: "TypeError: Cannot read property 'length' of undefined\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:48:32)',
  timestamp: '2019-11-16T09:58:11.280Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T09:58:41.684Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T09:58:43.679Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:00:02.036Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:00:02.523Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:01:40.041Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:01:40.518Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:13:20.710Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:13:21.113Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:13:21.248Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:13:25.334Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:13:25.754Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:13:25.864Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:14:06.131Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:14:08.351Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:14:09.399Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:14:56.686Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:14:57.117Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:14:57.216Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:15:50.667Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:15:51.056Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:15:51.163Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:16:15.755Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:16:16.153Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:16:16.251Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:18:11.965Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:18:12.451Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:19:31.926Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:19:32.346Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:19:32.471Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:20:45.946Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:20:46.340Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:20:46.439Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:20:54.909Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:20:55.350Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:20:55.496Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:20:58.222Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:20:58.629Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:20:58.727Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:21:39.740Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:21:40.189Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:21:40.319Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:22:11.540Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:22:11.950Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:24:37.463Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:24:37.938Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:28:39.601Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:28:40.076Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:30:39.930Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:30:40.341Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:32:00.020Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:32:00.749Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:32:01.172Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:32:01.300Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:32:59.801Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:33:00.184Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:33:00.282Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:33:46.296Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:33:46.703Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:34:16.566Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:34:16.970Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:34:52.061Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:34:52.510Z'
}
{
  message: 'notNull Violation: transaction.slotId cannot be null',
  level: 'error',
  timestamp: '2019-11-16T10:34:52.662Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:35:05.478Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:35:05.927Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:36:11.134Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:36:11.557Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:39:37.537Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:39:37.947Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:39:57.372Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:39:57.821Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:40:10.248Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:40:16.023Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:40:30.905Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:40:31.317Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:42:02.955Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:42:03.460Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:42:15.969Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:42:16.470Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T10:42:41.420Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T10:42:41.829Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:07:35.332Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:07:35.746Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:12:35.340Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:12:35.785Z'
}
{
  level: 'error',
  message: 'time_close is not definedtime_close is not defined',
  stack: 'ReferenceError: time_close is not defined\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:48:34)',
  timestamp: '2019-11-16T11:12:40.043Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:13:03.281Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:13:03.709Z'
}
{
  level: 'error',
  message: 'time_close is not definedtime_close is not defined',
  stack: 'ReferenceError: time_close is not defined\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:48:34)',
  timestamp: '2019-11-16T11:13:06.267Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:13:46.955Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:13:47.368Z'
}
{
  level: 'error',
  message: 'time_close is not definedtime_close is not defined',
  stack: 'ReferenceError: time_close is not defined\n' +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:48:34)',
  timestamp: '2019-11-16T11:13:50.449Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:14:25.258Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:14:25.718Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:14:46.421Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:14:46.893Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:15:11.429Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:15:11.897Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:15:38.009Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:15:38.461Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:15:52.700Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:15:53.179Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:16:06.941Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:16:07.383Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:18:16.073Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:18:16.716Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:18:45.542Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:18:45.962Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:19:05.035Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:19:05.500Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:19:57.107Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:19:57.543Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:20:25.664Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:20:26.132Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:21:00.376Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:21:00.828Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:22:51.943Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:22:52.375Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:23:52.833Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:23:53.240Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:24:14.501Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:24:15.066Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:24:48.155Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:24:48.611Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:25:58.993Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:25:59.389Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:26:17.807Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:26:18.224Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:28:33.220Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:28:33.674Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T11:33:59.132Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T11:33:59.542Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T13:26:33.113Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T13:26:33.527Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T13:28:53.065Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T13:28:53.458Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T13:29:44.261Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T13:29:44.753Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-16T13:30:42.905Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-16T13:30:43.356Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T02:03:38.876Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T02:03:39.342Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T02:15:02.562Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T02:15:03.027Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T02:59:42.022Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T02:59:42.516Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T03:04:39.537Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T03:04:39.964Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T03:43:17.119Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T03:43:17.533Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T03:44:24.575Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T03:44:25.028Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T04:24:08.402Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T04:24:08.829Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`transactions`, CONSTRAINT `transactions_ibfk_2` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-18T04:24:22.738Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T04:25:08.679Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T04:25:09.097Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`transactions`, CONSTRAINT `transactions_ibfk_2` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-18T04:28:18.494Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T04:29:38.510Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T04:29:38.964Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`transactions`, CONSTRAINT `transactions_ibfk_2` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-18T04:45:04.325Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T04:45:21.518Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T04:45:24.249Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`transactions`, CONSTRAINT `transactions_ibfk_2` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-18T04:45:51.002Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T04:46:56.012Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T04:46:56.439Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparkingdb2`.`transactions`, CONSTRAINT `transactions_ibfk_2` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-18T04:50:02.342Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T04:51:42.698Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T04:51:43.098Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T04:56:41.850Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T04:56:42.256Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T06:21:51.360Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T06:21:51.826Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T06:34:13.442Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T06:34:13.861Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-18T06:38:22.512Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-18T06:38:22.925Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-18T07:11:26.747Z'
}
{ level: 'error', timestamp: '2019-11-18T07:11:26.751Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-18T07:20:18.219Z'
}
{ level: 'error', timestamp: '2019-11-18T07:20:18.220Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-18T07:20:22.923Z'
}
{ level: 'error', timestamp: '2019-11-18T07:20:22.924Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-18T07:20:25.750Z'
}
{ level: 'error', timestamp: '2019-11-18T07:20:25.751Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T02:24:21.121Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T02:24:21.938Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T03:02:44.678Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T03:02:45.202Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T03:09:35.853Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T03:09:36.324Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T03:22:50.936Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T03:22:51.447Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T03:58:56.814Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T03:58:57.309Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T03:59:12.380Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T03:59:12.868Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T03:59:54.160Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T03:59:54.626Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:11:06.995Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:11:07.537Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:11:48.913Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:11:49.368Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:12:01.186Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:12:01.643Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:12:09.115Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:12:14.689Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:13:52.499Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:13:52.950Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:19:47.396Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:19:47.912Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:22:42.516Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:22:42.935Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:23:19.828Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:23:20.238Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:24:21.264Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:24:21.674Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:24:36.805Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:24:37.268Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:24:43.407Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:24:43.920Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:25:39.579Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:25:39.993Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:26:06.377Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:26:06.815Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:26:33.427Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:26:33.872Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:26:42.298Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:26:42.704Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:28:53.032Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:28:53.468Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:29:26.437Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:29:26.867Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:29:53.151Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:29:53.554Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:30:26.746Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:30:27.143Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:31:02.047Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:31:05.044Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:32:07.806Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:32:08.240Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:32:44.105Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:32:44.577Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:33:39.215Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:33:39.688Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:35:31.018Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:35:31.496Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:35:47.365Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:35:47.846Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:38:23.433Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:38:23.908Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:38:47.892Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:38:48.356Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:38:59.192Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:38:59.777Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:39:08.756Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:39:09.169Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:39:41.175Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:39:41.579Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:40:17.560Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:40:17.992Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:40:26.969Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:40:27.408Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:41:10.118Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:41:10.637Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:41:22.475Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:41:22.898Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:41:54.710Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:41:55.219Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:42:29.090Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:42:29.491Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:42:34.829Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:42:35.256Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:42:54.601Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:42:55.015Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:43:16.526Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:43:16.913Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:43:39.040Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:43:39.460Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T04:45:10.505Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T04:45:10.933Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:18:46.904Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:18:47.411Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:29:09.810Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:29:10.256Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:29:36.851Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:29:37.266Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:29:55.558Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:29:55.968Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:30:04.384Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:30:04.889Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:33:12.984Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:33:13.401Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:33:16.833Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:33:17.266Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:33:45.073Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:33:45.483Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:40:34.828Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:40:35.211Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:52:31.120Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:52:31.604Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:52:40.790Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:52:41.232Z'
}
{
  level: 'error',
  message: 'WHERE parameter "yardId" has invalid "undefined" valueWHERE parameter "yardId" has invalid "undefined" value',
  stack: 'Error: WHERE parameter "yardId" has invalid "undefined" value\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2184:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-19T06:52:49.298Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:53:02.479Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:53:02.894Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:53:26.622Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:53:27.074Z'
}
{
  level: 'error',
  message: 'WHERE parameter "yardId" has invalid "undefined" valueWHERE parameter "yardId" has invalid "undefined" value',
  stack: 'Error: WHERE parameter "yardId" has invalid "undefined" value\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2184:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-19T06:53:28.301Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:54:11.301Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:54:11.781Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:54:15.543Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:54:16.014Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:54:48.401Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:54:48.808Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:55:05.583Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:55:06.071Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T06:58:30.539Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T06:58:30.968Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:03:03.866Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:03:04.320Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:03:07.624Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:03:08.186Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:18:58.394Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:18:58.826Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:20:05.760Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:20:06.189Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:22:44.607Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:22:45.064Z'
}
{
  level: 'error',
  message: 'accountId is not definedaccountId is not defined',
  stack: 'ReferenceError: accountId is not defined\n' +
    '    at show_history (D:\\CarParking-BackEnd\\controllers\\ownerController.js:29:25)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-19T07:22:47.694Z'
}
{
  level: 'error',
  message: 'accountId is not definedaccountId is not defined',
  stack: 'ReferenceError: accountId is not defined\n' +
    '    at show_history (D:\\CarParking-BackEnd\\controllers\\ownerController.js:29:25)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-19T07:22:49.529Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:23:00.648Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:23:01.099Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_history (D:\\CarParking-BackEnd\\controllers\\ownerController.js:32:41)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-19T07:23:03.287Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:23:10.861Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:23:11.430Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:23:53.370Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:23:53.814Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:24:51.151Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:24:51.567Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_history (D:\\CarParking-BackEnd\\controllers\\ownerController.js:32:40)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-19T07:24:54.891Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_history (D:\\CarParking-BackEnd\\controllers\\ownerController.js:32:40)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:354:14)\n' +
    '    at param (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:365:14)\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:410:3)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)',
  timestamp: '2019-11-19T07:24:56.283Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-19T07:25:03.730Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-19T07:25:04.214Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T01:54:32.498Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T01:54:32.982Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T02:22:40.041Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T02:22:40.571Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T06:52:13.021Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-20T06:52:13.126Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T06:54:05.767Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-20T06:54:05.824Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T06:56:16.121Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T06:56:16.440Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T06:57:17.042Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T06:57:17.488Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T07:19:59.791Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T07:20:00.197Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T07:20:46.885Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T07:20:47.566Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T07:56:06.174Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T07:56:06.636Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:09:33.335Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:09:33.739Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:12:18.400Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:12:18.794Z'
}
{
  level: 'error',
  message: "Cannot read property 'findAll' of undefinedCannot read property 'findAll' of undefined",
  stack: "TypeError: Cannot read property 'findAll' of undefined\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:43:43)',
  timestamp: '2019-11-20T08:12:22.405Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:13:31.388Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:13:31.782Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:14:10.156Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:14:10.554Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:16:17.822Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:16:18.230Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:16:24.193Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:16:24.623Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:16:41.491Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:16:41.893Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:17:47.972Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:17:48.408Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:23:29.350Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:23:29.785Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:23:52.740Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:23:53.148Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:24:27.001Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:24:27.390Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:25:28.304Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:25:28.720Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:36:10.651Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:36:11.111Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T08:37:12.402Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T08:37:12.782Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T09:18:48.490Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T09:18:48.974Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T09:30:07.381Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T09:30:07.771Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T09:47:21.088Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T09:47:21.604Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T09:51:50.993Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T09:51:51.414Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-20T09:52:39.653Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-20T09:52:40.085Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T01:53:01.249Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T01:53:01.688Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:12:13.570Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:12:14.080Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:17:09.063Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:17:09.523Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:17:50.118Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:17:50.543Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:47.916Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)\n' +
    '    at processTicksAndRejections (internal/process/task_queues.js:93:5)',
  timestamp: '2019-11-21T02:20:47.961Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:47.972Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:47.984Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:48.015Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:48.296Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:48.313Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:48.334Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:48.351Z'
}
{
  level: 'error',
  message: "Cannot read property 'time_open' of nullCannot read property 'time_open' of null",
  stack: "TypeError: Cannot read property 'time_open' of null\n" +
    '    at show_yards_details (D:\\CarParking-BackEnd\\controllers\\customerController.js:69:19)',
  timestamp: '2019-11-21T02:20:48.367Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:46:27.372Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:46:28.112Z'
}
{
  message: 'Cannot add or update a child row: a foreign key constraint fails (`carparking_db`.`transactions`, CONSTRAINT `transactions_ibfk_2` FOREIGN KEY (`yardId`) REFERENCES `yards` (`id`) ON DELETE SET NULL ON UPDATE CASCADE)',
  level: 'error',
  timestamp: '2019-11-21T02:47:06.552Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:49:03.257Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:49:03.676Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:49:57.161Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:49:57.603Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:50:33.904Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:50:34.314Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T02:51:15.672Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T02:51:16.080Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T04:19:23.595Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T04:19:24.080Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:32:53.004Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:32:53.446Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:34:05.581Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:34:06.041Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:34:29.106Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:34:29.525Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:34:44.570Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:34:45.014Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:34:55.203Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:34:55.683Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:35:02.830Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:35:03.297Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:36:14.116Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:36:14.545Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:39:48.147Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:39:48.611Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:41:42.376Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:41:42.809Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:42:19.623Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:42:20.067Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:43:10.228Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:43:10.674Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:44:54.410Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:44:54.858Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:45:33.738Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:45:34.251Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:46:18.593Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:46:19.045Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:47:33.578Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:47:34.093Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:47:41.786Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:47:42.211Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:48:34.602Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:48:35.062Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:48:53.697Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:48:54.176Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:49:19.223Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:49:24.758Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:49:41.132Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:49:41.588Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:52:10.087Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:52:10.540Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:53:17.408Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:53:17.881Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T07:59:14.298Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T07:59:14.825Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T08:00:18.925Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T08:00:19.335Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T08:02:02.928Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T08:02:03.453Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T08:05:09.962Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T08:05:10.413Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T08:05:34.795Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T08:05:35.200Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-21T08:12:33.010Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-21T08:12:33.440Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:26:43.987Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-22T02:26:46.050Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:27:46.063Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-22T02:27:48.192Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:28:03.486Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-22T02:28:05.580Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:28:29.837Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-22T02:28:31.956Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:29:00.218Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-22T02:29:00.432Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:29:04.209Z'
}
{
  message: 'Cannot delete or update a parent row: a foreign key constraint fails',
  level: 'error',
  timestamp: '2019-11-22T02:29:04.262Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:29:39.926Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T02:29:40.258Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T02:29:41.590Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T02:29:42.077Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:25:55.363Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:25:55.809Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:26:05.241Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:26:05.695Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:26:29.109Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:26:29.694Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:33:23.626Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:33:24.009Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:33:51.242Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:33:51.589Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:34:03.806Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:34:04.243Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:35:30.420Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:35:30.776Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:36:11.425Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:36:11.789Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:38:00.654Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:38:01.042Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:39:15.825Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:39:16.255Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:42:57.660Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:42:58.104Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:43:06.387Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:43:06.790Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:43:18.935Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:43:19.332Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:43:52.732Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:43:53.155Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:45:31.947Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:45:32.346Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:46:39.696Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:46:40.077Z'
}
{
  level: 'error',
  message: 'WHERE parameter "username" has invalid "undefined" valueWHERE parameter "username" has invalid "undefined" value',
  stack: 'Error: WHERE parameter "username" has invalid "undefined" value\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2184:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-22T03:46:46.595Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:47:00.673Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:47:01.157Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:47:36.131Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:47:36.492Z'
}
{
  level: 'error',
  message: 'WHERE parameter "username" has invalid "undefined" valueWHERE parameter "username" has invalid "undefined" value',
  stack: 'Error: WHERE parameter "username" has invalid "undefined" value\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2184:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-22T03:47:42.377Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:47:56.479Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:47:56.869Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:48:30.582Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:48:30.987Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:48:43.880Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:48:44.296Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:49:59.309Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:49:59.707Z'
}
{
  level: 'error',
  message: "Invalid value { name: 'Nguyen Duc An' }Invalid value { name: 'Nguyen Duc An' }",
  stack: "Error: Invalid value { name: 'Nguyen Duc An' }\n" +
    '    at Object.escape (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\sql-string.js:65:11)\n' +
    '    at MySQLQueryGenerator.escape (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:986:22)\n' +
    '    at MySQLQueryGenerator._whereParseSingleValueObject (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2556:41)\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2274:19)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-22T03:50:03.760Z'
}
{
  level: 'error',
  message: "Invalid value { name: 'Nguyen Duc An' }Invalid value { name: 'Nguyen Duc An' }",
  stack: "Error: Invalid value { name: 'Nguyen Duc An' }\n" +
    '    at Object.escape (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\sql-string.js:65:11)\n' +
    '    at MySQLQueryGenerator.escape (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:986:22)\n' +
    '    at MySQLQueryGenerator._whereParseSingleValueObject (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2556:41)\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2274:19)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-22T03:50:05.655Z'
}
{
  level: 'error',
  message: "Invalid value { name: 'Nguyen' }Invalid value { name: 'Nguyen' }",
  stack: "Error: Invalid value { name: 'Nguyen' }\n" +
    '    at Object.escape (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\sql-string.js:65:11)\n' +
    '    at MySQLQueryGenerator.escape (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:986:22)\n' +
    '    at MySQLQueryGenerator._whereParseSingleValueObject (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2556:41)\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2274:19)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-22T03:50:09.159Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:50:18.707Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:50:19.151Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:51:57.825Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:51:58.235Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:53:17.007Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:53:17.370Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:54:20.385Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:54:20.775Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:54:56.797Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:54:57.181Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:55:20.704Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:55:21.076Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:56:09.365Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:56:09.732Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%An%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  original: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%An%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%An%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'roles.name' in 'on clause'Unknown column 'roles.name' in 'on clause'",
  stack: "SequelizeDatabaseError: Unknown column 'roles.name' in 'on clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T03:56:12.492Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:56:35.373Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:56:35.747Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:56:40.424Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:56:40.820Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:58:53.053Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:58:53.442Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%Binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`name` LIKE '%Binh%';",
    parameters: undefined
  },
  original: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%Binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`name` LIKE '%Binh%';",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%Binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`name` LIKE '%Binh%';",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'roles.name' in 'on clause'Unknown column 'roles.name' in 'on clause'",
  stack: "SequelizeDatabaseError: Unknown column 'roles.name' in 'on clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T03:58:55.763Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:59:05.197Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:59:05.562Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:59:28.290Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:59:28.698Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%Binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  original: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%Binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%Binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'roles.name' in 'on clause'Unknown column 'roles.name' in 'on clause'",
  stack: "SequelizeDatabaseError: Unknown column 'roles.name' in 'on clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T03:59:29.727Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T03:59:44.524Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T03:59:44.895Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  original: Error: Unknown column 'roles.name' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.name' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 AND `roles`.`name` LIKE '%binh%' LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'roles.name' in 'on clause'Unknown column 'roles.name' in 'on clause'",
  stack: "SequelizeDatabaseError: Unknown column 'roles.name' in 'on clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T03:59:52.806Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:00:22.256Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:00:22.689Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:00:41.824Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:00:42.212Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:00:55.711Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:00:56.230Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:01:27.935Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:01:28.292Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:02:25.204Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:02:25.569Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'account.address' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'account.address' in 'where clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE ((`account`.`name` LIKE '%An%' AND `account`.`address` LIKE '%An%'));",
    parameters: undefined
  },
  original: Error: Unknown column 'account.address' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'account.address' in 'where clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE ((`account`.`name` LIKE '%An%' AND `account`.`address` LIKE '%An%'));",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE ((`account`.`name` LIKE '%An%' AND `account`.`address` LIKE '%An%'));",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'account.address' in 'where clause'Unknown column 'account.address' in 'where clause'",
  stack: "SequelizeDatabaseError: Unknown column 'account.address' in 'where clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T04:02:28.711Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:02:51.539Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:02:51.946Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:03:26.151Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:03:26.565Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:03:33.790Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:03:34.190Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'account.address' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'account.address' in 'where clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`address` LIKE '%An%';",
    parameters: undefined
  },
  original: Error: Unknown column 'account.address' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'account.address' in 'where clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`address` LIKE '%An%';",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`address` LIKE '%An%';",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'account.address' in 'where clause'Unknown column 'account.address' in 'where clause'",
  stack: "SequelizeDatabaseError: Unknown column 'account.address' in 'where clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T04:03:35.589Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'account.address' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'account.address' in 'where clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`address` LIKE '%Duy%';",
    parameters: undefined
  },
  original: Error: Unknown column 'account.address' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'account.address' in 'where clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`address` LIKE '%Duy%';",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND `roles`.`id` = 2 LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId` WHERE `account`.`address` LIKE '%Duy%';",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'account.address' in 'where clause'Unknown column 'account.address' in 'where clause'",
  stack: "SequelizeDatabaseError: Unknown column 'account.address' in 'where clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T04:03:53.943Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:04:07.737Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:04:08.139Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:06:40.754Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:06:41.145Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'roles.address' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.address' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND (`roles`.`id` = 2 OR `roles`.`address` LIKE '%Duy%') LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  original: Error: Unknown column 'roles.address' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.address' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND (`roles`.`id` = 2 OR `roles`.`address` LIKE '%Duy%') LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND (`roles`.`id` = 2 OR `roles`.`address` LIKE '%Duy%') LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'roles.address' in 'on clause'Unknown column 'roles.address' in 'on clause'",
  stack: "SequelizeDatabaseError: Unknown column 'roles.address' in 'on clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T04:06:48.664Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:06:56.399Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:06:56.786Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'roles.address' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.address' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND (`roles`.`id` = 2 AND `roles`.`address` LIKE '%Duy%') LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  original: Error: Unknown column 'roles.address' in 'on clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'roles.address' in 'on clause'",
    sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND (`roles`.`id` = 2 AND `roles`.`address` LIKE '%Duy%') LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
    parameters: undefined
  },
  sql: "SELECT `account`.`id`, `account`.`username`, `account`.`password`, `account`.`status`, `account`.`name`, `account`.`birthday`, `account`.`gender`, `account`.`phone`, `account`.`image`, `account`.`balance`, `roles`.`id` AS `roles.id`, `roles`.`role_name` AS `roles.role_name`, `roles->account_role`.`accountId` AS `roles.account_role.accountId`, `roles->account_role`.`roleId` AS `roles.account_role.roleId`, `yard`.`id` AS `yard.id`, `yard`.`status` AS `yard.status`, `yard`.`address` AS `yard.address`, `yard`.`image_yard` AS `yard.image_yard`, `yard`.`latitude` AS `yard.latitude`, `yard`.`longitude` AS `yard.longitude`, `yard`.`time_open` AS `yard.time_open`, `yard`.`time_close` AS `yard.time_close`, `yard`.`price` AS `yard.price`, `yard`.`slot` AS `yard.slot`, `yard`.`times` AS `yard.times`, `yard`.`accountId` AS `yard.accountId` FROM `accounts` AS `account` INNER JOIN ( `account_roles` AS `roles->account_role` INNER JOIN `roles` AS `roles` ON `roles`.`id` = `roles->account_role`.`roleId`) ON `account`.`id` = `roles->account_role`.`accountId` AND (`roles`.`id` = 2 AND `roles`.`address` LIKE '%Duy%') LEFT OUTER JOIN `yards` AS `yard` ON `account`.`id` = `yard`.`accountId`;",
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'roles.address' in 'on clause'Unknown column 'roles.address' in 'on clause'",
  stack: "SequelizeDatabaseError: Unknown column 'roles.address' in 'on clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-22T04:06:57.904Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T04:07:32.574Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T04:07:32.974Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T06:43:54.875Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T06:43:55.302Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T06:43:57.794Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T06:43:58.315Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T06:44:10.843Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T06:44:11.400Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T06:44:33.163Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T06:44:33.579Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-22T06:45:05.305Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-22T06:45:05.773Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-25T08:41:29.311Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-25T08:41:29.808Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-25T08:43:58.471Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-25T08:43:58.919Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-25T08:44:11.175Z'
}
{ level: 'error', timestamp: '2019-11-25T08:44:11.178Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-25T08:45:05.715Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-25T08:45:06.169Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T01:54:15.658Z'
}
{ level: 'error', timestamp: '2019-11-26T01:54:15.662Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T01:58:15.440Z'
}
{ level: 'error', timestamp: '2019-11-26T01:58:15.442Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T01:58:45.860Z'
}
{ level: 'error', timestamp: '2019-11-26T01:58:45.861Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:00:05.658Z'
}
{ level: 'error', timestamp: '2019-11-26T02:00:05.661Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:04:29.748Z'
}
{ level: 'error', timestamp: '2019-11-26T02:04:29.750Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:05:59.847Z'
}
{ level: 'error', timestamp: '2019-11-26T02:05:59.849Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:08:17.811Z'
}
{ level: 'error', timestamp: '2019-11-26T02:08:17.812Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:11:08.263Z'
}
{ level: 'error', timestamp: '2019-11-26T02:11:08.265Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:11:34.930Z'
}
{ level: 'error', timestamp: '2019-11-26T02:11:34.931Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:12:21.095Z'
}
{ level: 'error', timestamp: '2019-11-26T02:12:21.097Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-26T02:13:46.628Z'
}
{ level: 'error', timestamp: '2019-11-26T02:13:46.630Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-27T01:25:02.575Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-27T01:25:04.812Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-27T01:25:21.142Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-27T01:25:21.660Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:42:01.071Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:42:01.586Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:44:10.748Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:44:11.155Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:45:13.137Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:45:20.357Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:48:45.317Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:48:45.721Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:49:01.154Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:49:01.588Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:49:16.118Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:49:16.553Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:50:16.111Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:50:16.529Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:50:31.789Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:50:34.214Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:50:58.453Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:50:59.161Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:52:54.605Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:52:54.970Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:55:00.826Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:55:01.185Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:56:26.423Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:56:26.866Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:56:57.767Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:56:58.144Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:57:13.654Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:57:14.119Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T01:59:26.466Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T01:59:26.839Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:01:14.623Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:01:15.020Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:01:44.871Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:01:45.319Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:03:27.496Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:03:27.883Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:04:02.751Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:04:03.180Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:47:39.582Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:47:39.966Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:48:04.402Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:48:04.767Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:50:29.454Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:50:29.873Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:50:36.315Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:50:36.691Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:51:01.095Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:51:01.469Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T02:51:03.512Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T02:51:03.875Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:04:11.917Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:04:12.350Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_all_transactions (D:\\CarParking-BackEnd\\controllers\\adminController.js:45:22)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)',
  timestamp: '2019-11-28T03:04:14.099Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:04:27.590Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:04:27.981Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:04:54.155Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:04:54.555Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_all_transactions (D:\\CarParking-BackEnd\\controllers\\adminController.js:45:36)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)',
  timestamp: '2019-11-28T03:04:57.142Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:05:06.179Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:05:06.564Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_all_transactions (D:\\CarParking-BackEnd\\controllers\\adminController.js:45:37)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)',
  timestamp: '2019-11-28T03:05:08.431Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:05:22.945Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:05:23.322Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_all_transactions (D:\\CarParking-BackEnd\\controllers\\adminController.js:45:26)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)',
  timestamp: '2019-11-28T03:05:23.573Z'
}
{
  level: 'error',
  message: 'name is not definedname is not defined',
  stack: 'ReferenceError: name is not defined\n' +
    '    at show_all_transactions (D:\\CarParking-BackEnd\\controllers\\adminController.js:45:26)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:137:13)\n' +
    '    at Route.dispatch (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\route.js:112:3)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:281:22\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at Function.handle (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:174:3)\n' +
    '    at router (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:47:12)\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:284:7\n' +
    '    at Function.process_params (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:335:12)\n' +
    '    at next (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:275:10)\n' +
    '    at D:\\CarParking-BackEnd\\startup\\routes.js:29:5\n' +
    '    at newFn (D:\\CarParking-BackEnd\\node_modules\\express-async-errors\\index.js:16:20)\n' +
    '    at Layer.handle [as handle_request] (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\layer.js:95:5)\n' +
    '    at trim_prefix (D:\\CarParking-BackEnd\\node_modules\\express\\lib\\router\\index.js:317:13)',
  timestamp: '2019-11-28T03:05:24.762Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:06:12.097Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:06:13.417Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:07:48.271Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:07:48.771Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:08:13.254Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:08:13.634Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:08:41.242Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:08:41.630Z'
}
{
  level: 'error',
  message: 's.replace is not a functions.replace is not a function',
  stack: 'TypeError: s.replace is not a function\n' +
    '    at Object.removeTicks (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\utils.js:354:12)\n' +
    '    at Object.quoteIdentifier (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator\\helpers\\quote.js:47:35)\n' +
    '    at MySQLQueryGenerator.quoteIdentifier (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:891:24)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1517:74\n' +
    '    at Array.map (<anonymous>)\n' +
    '    at MySQLQueryGenerator.generateInclude (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1481:52)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1183:34)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-11-28T03:08:42.884Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:08:52.232Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:08:52.657Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:08:54.719Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:08:55.107Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:09:28.861Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:09:29.284Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:09:51.756Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:09:52.137Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:10:46.196Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:10:46.657Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'yard.yardId' in 'field list'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'yard.yardId' in 'field list'",
    sql: 'SELECT `transaction`.`id`, `transaction`.`day`, `transaction`.`time_come`, `transaction`.`time_leave`, `transaction`.`price`, `transaction`.`car_number`, `transaction`.`accountId`, `transaction`.`yardId`, `account`.`id` AS `account.id`, `account`.`name` AS `account.name`, `yard`.`id` AS `yard.id`, `yard`.`yardId` AS `yard.yardId`, `yard->account`.`id` AS `yard.account.id`, `yard->account`.`name` AS `yard.account.name` FROM `transactions` AS `transaction` LEFT OUTER JOIN `accounts` AS `account` ON `transaction`.`accountId` = `account`.`id` LEFT OUTER JOIN `yards` AS `yard` ON `transaction`.`yardId` = `yard`.`id` LEFT OUTER JOIN `accounts` AS `yard->account` ON `yard`.`accountId` = `yard->account`.`id`;',
    parameters: undefined
  },
  original: Error: Unknown column 'yard.yardId' in 'field list'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'yard.yardId' in 'field list'",
    sql: 'SELECT `transaction`.`id`, `transaction`.`day`, `transaction`.`time_come`, `transaction`.`time_leave`, `transaction`.`price`, `transaction`.`car_number`, `transaction`.`accountId`, `transaction`.`yardId`, `account`.`id` AS `account.id`, `account`.`name` AS `account.name`, `yard`.`id` AS `yard.id`, `yard`.`yardId` AS `yard.yardId`, `yard->account`.`id` AS `yard.account.id`, `yard->account`.`name` AS `yard.account.name` FROM `transactions` AS `transaction` LEFT OUTER JOIN `accounts` AS `account` ON `transaction`.`accountId` = `account`.`id` LEFT OUTER JOIN `yards` AS `yard` ON `transaction`.`yardId` = `yard`.`id` LEFT OUTER JOIN `accounts` AS `yard->account` ON `yard`.`accountId` = `yard->account`.`id`;',
    parameters: undefined
  },
  sql: 'SELECT `transaction`.`id`, `transaction`.`day`, `transaction`.`time_come`, `transaction`.`time_leave`, `transaction`.`price`, `transaction`.`car_number`, `transaction`.`accountId`, `transaction`.`yardId`, `account`.`id` AS `account.id`, `account`.`name` AS `account.name`, `yard`.`id` AS `yard.id`, `yard`.`yardId` AS `yard.yardId`, `yard->account`.`id` AS `yard.account.id`, `yard->account`.`name` AS `yard.account.name` FROM `transactions` AS `transaction` LEFT OUTER JOIN `accounts` AS `account` ON `transaction`.`accountId` = `account`.`id` LEFT OUTER JOIN `yards` AS `yard` ON `transaction`.`yardId` = `yard`.`id` LEFT OUTER JOIN `accounts` AS `yard->account` ON `yard`.`accountId` = `yard->account`.`id`;',
  parameters: undefined,
  level: 'error',
  message: "Unknown column 'yard.yardId' in 'field list'Unknown column 'yard.yardId' in 'field list'",
  stack: "SequelizeDatabaseError: Unknown column 'yard.yardId' in 'field list'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-11-28T03:10:47.339Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:10:54.611Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:10:54.998Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-11-28T03:16:17.552Z'
}
{ level: 'error', timestamp: '2019-11-28T03:16:17.558Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:24:51.864Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:24:52.250Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:29:53.829Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:29:54.200Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:30:18.287Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:30:18.684Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T03:31:03.270Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T03:31:03.744Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-28T04:03:11.524Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-28T04:03:12.008Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-29T06:45:00.742Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-11-29T06:45:02.884Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-11-29T06:45:51.492Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-11-29T06:45:51.961Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T01:03:40.370Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T01:03:40.991Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T04:40:42.115Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T04:40:42.594Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:01:20.133Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:01:23.733Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:02:33.630Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:02:40.021Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:03:01.325Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:03:01.712Z'
}
{
  level: 'error',
  message: "Cannot read property 'latitude' of undefinedCannot read property 'latitude' of undefined",
  stack: "TypeError: Cannot read property 'latitude' of undefined\n" +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:317:50)',
  timestamp: '2019-12-01T05:03:03.708Z'
}
{
  level: 'error',
  message: "Cannot read property 'latitude' of undefinedCannot read property 'latitude' of undefined",
  stack: "TypeError: Cannot read property 'latitude' of undefined\n" +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:317:50)',
  timestamp: '2019-12-01T05:03:05.447Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:03:23.418Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:03:23.822Z'
}
{
  level: 'error',
  message: "Cannot read property 'latitude' of undefinedCannot read property 'latitude' of undefined",
  stack: "TypeError: Cannot read property 'latitude' of undefined\n" +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:317:50)',
  timestamp: '2019-12-01T05:03:25.623Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:04:07.750Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:04:08.145Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:04:23.107Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:04:23.510Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:04:52.458Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:04:52.868Z'
}
{
  level: 'error',
  message: "Cannot read property 'latitude' of undefinedCannot read property 'latitude' of undefined",
  stack: "TypeError: Cannot read property 'latitude' of undefined\n" +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:317:50)',
  timestamp: '2019-12-01T05:05:02.814Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:05:25.480Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:05:25.894Z'
}
{
  level: 'error',
  message: "Cannot read property 'latitude' of undefinedCannot read property 'latitude' of undefined",
  stack: "TypeError: Cannot read property 'latitude' of undefined\n" +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:317:50)',
  timestamp: '2019-12-01T05:05:27.231Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:06:52.313Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:06:52.758Z'
}
{
  level: 'error',
  message: 'yard is not definedyard is not defined',
  stack: 'ReferenceError: yard is not defined\n' +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:322:14)',
  timestamp: '2019-12-01T05:06:53.818Z'
}
{
  level: 'error',
  message: 'yard is not definedyard is not defined',
  stack: 'ReferenceError: yard is not defined\n' +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:322:14)',
  timestamp: '2019-12-01T05:06:55.398Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:07:02.506Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:07:02.926Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:07:16.163Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:07:16.591Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:07:40.794Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:07:41.158Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:11:02.209Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:11:02.594Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:14:39.105Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:14:39.555Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:15:35.267Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:15:35.641Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:16:50.560Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:16:50.949Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:17:04.051Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:17:04.464Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:17:37.670Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:17:38.056Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:323:21)',
  timestamp: '2019-12-01T05:17:41.252Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:18:22.647Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:18:23.069Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:327:7)',
  timestamp: '2019-12-01T05:18:24.470Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:327:7)',
  timestamp: '2019-12-01T05:18:25.691Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:18:30.968Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:18:31.374Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:327:7)',
  timestamp: '2019-12-01T05:18:32.606Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:18:50.197Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:18:50.613Z'
}
{
  level: 'error',
  message: 'Assignment to constant variable.Assignment to constant variable.',
  stack: 'TypeError: Assignment to constant variable.\n' +
    '    at show_nearest_address (D:\\CarParking-BackEnd\\controllers\\customerController.js:327:7)',
  timestamp: '2019-12-01T05:18:52.262Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:19:00.473Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:19:00.879Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:19:08.513Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:19:08.911Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:20:18.823Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:20:19.241Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:20:41.313Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:20:41.681Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:21:05.210Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:21:05.628Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:21:21.215Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:21:21.633Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:21:34.097Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:21:34.497Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:30:55.647Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:30:56.062Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:31:12.721Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:31:13.102Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:31:27.675Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:31:28.064Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:31:47.793Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:31:48.163Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:32:11.071Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:32:11.468Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:32:23.528Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:32:23.952Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:33:41.074Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:33:41.476Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:34:33.802Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:34:34.217Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:34:41.902Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:34:42.315Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:40:03.857Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:40:04.235Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-01T05:40:55.009Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-01T05:40:55.405Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T06:25:02.344Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T06:25:02.719Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T06:40:00.265Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T06:40:00.695Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:05:06.330Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:05:06.747Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:09:23.057Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:09:23.466Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:35:12.619Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:35:13.043Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:37:59.210Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:37:59.616Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:38:09.024Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:38:09.421Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:39:04.760Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:39:05.150Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:40:28.030Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:40:28.387Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:44:35.418Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:44:35.799Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:46:38.250Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:46:38.632Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T07:57:36.017Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T07:57:36.443Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n' +
    '        "id": 1,\r\n' +
    '        "day": "2019-11-12",\r\n' +
    '        "time_come": 7,\r\n' +
    '        "time_leave": 9,\r\n' +
    '        "price": 30000,\r\n' +
    '        "car_number": "VK96DE9864",\r\n' +
    '        "accountId": 1,\r\n' +
    '        "yardId": 1,\r\n' +
    '}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-02T08:01:14.990Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:02:41.175Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:02:41.548Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:03:40.449Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:03:40.822Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:04:05.512Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:04:05.882Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:05:52.541Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:05:52.939Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:09:35.920Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:09:36.286Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:10:36.110Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:10:36.482Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:14:51.790Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:14:52.202Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:15:13.306Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:15:13.711Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:15:35.002Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:15:35.376Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:15:45.286Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:15:45.701Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:16:10.401Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:16:12.564Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:16:35.289Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:16:36.901Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:17:18.678Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:17:19.070Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:17:28.870Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:17:29.285Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:17:31.016Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:17:31.407Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:17:49.293Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:17:49.770Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:18:02.360Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:18:02.760Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:18:23.544Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:18:23.940Z'
}
{
  level: 'error',
  message: 'WHERE parameter "day" has invalid "undefined" valueWHERE parameter "day" has invalid "undefined" value',
  stack: 'Error: WHERE parameter "day" has invalid "undefined" value\n' +
    '    at MySQLQueryGenerator.whereItemQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2184:13)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2173:25\n' +
    '    at Array.forEach (<anonymous>)\n' +
    '    at MySQLQueryGenerator.whereItemsQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2171:35)\n' +
    '    at MySQLQueryGenerator.getWhereConditions (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:2583:19)\n' +
    '    at MySQLQueryGenerator.selectQuery (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\abstract\\query-generator.js:1315:28)\n' +
    '    at QueryInterface.select (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\query-interface.js:1122:27)\n' +
    '    at D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:1757:34\n' +
    '    at tryCatcher (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n' +
    '    at Promise._settlePromiseFromHandler (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:547:31)\n' +
    '    at Promise._settlePromise (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:604:18)\n' +
    '    at Promise._settlePromise0 (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:649:10)\n' +
    '    at Promise._settlePromises (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\promise.js:729:18)\n' +
    '    at _drainQueueStep (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:93:12)\n' +
    '    at _drainQueue (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:86:9)\n' +
    '    at Async._drainQueues (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:102:5)\n' +
    '    at Immediate.Async.drainQueues [as _onImmediate] (D:\\CarParking-BackEnd\\node_modules\\bluebird\\js\\release\\async.js:15:14)\n' +
    '    at processImmediate (internal/timers.js:439:21)',
  timestamp: '2019-12-02T08:18:26.832Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:18:44.159Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:18:44.539Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:19:33.737Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:19:34.157Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:20:00.493Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:20:00.972Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:20:28.575Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:20:28.989Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:21:35.927Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:21:36.335Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:23:17.240Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:23:17.626Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:27:43.042Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:27:43.504Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:27:43.795Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:27:46.725Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:27:47.107Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:27:47.304Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:30:50.479Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:30:50.893Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:31:52.961Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:31:53.335Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:32:37.387Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:33:00.850Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:33:01.239Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:33:21.760Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:33:53.839Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:33:54.259Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:34:03.355Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:34:03.804Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:34:10.015Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:34:29.953Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:34:30.338Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:34:39.752Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:34:58.105Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:34:58.497Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:35:01.575Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:36:15.622Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:36:16.188Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:36:21.273Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:37:25.130Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:37:25.604Z'
}
{
  message: 'notNull Violation: transaction.slot cannot be null',
  level: 'error',
  timestamp: '2019-12-02T08:37:28.272Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:38:39.456Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:38:39.955Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T08:39:26.663Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T08:39:28.938Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T09:06:41.633Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T09:06:42.100Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T09:06:56.331Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T09:06:56.729Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T09:09:02.426Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T09:09:02.788Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T09:10:42.771Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T09:10:43.163Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-02T09:15:42.741Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-02T09:15:43.111Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-04T01:26:19.714Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-04T01:26:20.132Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-04T01:28:11.997Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-04T01:28:12.382Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-04T01:43:53.115Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-04T01:43:53.469Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-05T07:05:09.178Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-05T07:05:09.613Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-05T07:07:00.917Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-05T07:07:01.499Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-05T07:15:24.976Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-05T07:15:29.238Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T00:25:33.943Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T00:25:34.366Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T06:50:21.303Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T06:50:21.717Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T06:52:36.522Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T06:52:37.106Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n' +
    '\t"day": 2019/12/08,\n' +
    '\t"time_come": 7,\n' +
    '\t"time_leave": 10,\n' +
    '\t"status": "true"\n' +
    '}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-06T06:54:12.880Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T06:56:41.889Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T06:56:42.386Z'
}
{ level: 'error', timestamp: '2019-12-06T06:56:49.103Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T06:57:29.182Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T06:57:29.619Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T06:57:41.962Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T06:57:42.389Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T06:58:32.743Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T06:58:33.141Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:22:33.711Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:22:34.071Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:28:42.324Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:28:42.705Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:29:36.697Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:29:37.132Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:30:00.687Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:30:01.091Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:30:08.572Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:30:08.958Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:32:33.297Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:32:33.698Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:32:58.593Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:32:59.003Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:46:35.978Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:46:36.368Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-06T07:48:19.675Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-06T07:48:20.079Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-09T01:37:32.170Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-09T01:37:32.636Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-11T03:19:37.466Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-11T03:19:37.954Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-11T09:18:27.609Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-11T09:18:28.075Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-12T03:18:48.019Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-12T03:18:50.113Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-12T04:23:05.333Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-12T04:23:05.828Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T02:15:18.861Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T02:15:19.367Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:24:09.404Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:24:09.910Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:24:52.760Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:24:53.290Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:26:57.786Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:26:58.275Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:28:14.529Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:28:15.024Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:28:19.133Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:30:17.234Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:30:17.669Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:30:30.108Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:30:30.552Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:30:33.077Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:31:32.738Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:31:33.155Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:32:08.823Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:32:09.229Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:34:57.033Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:34:57.478Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:35:02.793Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:35:39.975Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:35:52.437Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:35:52.896Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:36:53.782Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:36:54.207Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:37:10.387Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:37:10.913Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:37:32.520Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:37:32.962Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:37:40.505Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:37:43.987Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:38:30.425Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:38:30.853Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:38:43.883Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:39:37.638Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:39:38.162Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:39:39.868Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:39:49.630Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:39:50.077Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:40:05.408Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:40:12.936Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:40:21.677Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:40:45.807Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:40:46.233Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:40:48.404Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:40:48.854Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:40:56.724Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:40:57.195Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:41:26.300Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:42:24.083Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:42:24.542Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:42:26.000Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:42:32.237Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:42:39.121Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:43:07.095Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:43:44.114Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:43:44.594Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\n\t"car_number":"GFD54FDSDS"\n\t"transactionId": 4\n}',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-13T06:43:53.052Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:44:17.083Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:44:17.590Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:44:39.125Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:44:39.677Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:45:13.538Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:45:14.012Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:46:12.021Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:46:12.474Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:46:38.393Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:46:38.856Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:47:05.446Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:47:05.932Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:47:09.951Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:47:10.388Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:47:13.969Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:47:14.418Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:47:47.206Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:47:49.465Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T06:47:55.509Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T06:47:55.910Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T07:45:28.059Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T07:45:28.500Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-12-13T08:07:10.373Z'
}
{ level: 'error', timestamp: '2019-12-13T08:07:10.376Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-13T08:19:33.927Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-13T08:19:34.361Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-15T02:58:58.261Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-15T02:58:58.732Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-15T08:54:10.392Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-15T08:54:10.851Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-15T08:55:37.837Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-15T08:55:38.284Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-15T08:55:41.972Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-15T08:55:42.462Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-15T08:56:27.432Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-15T08:56:27.894Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-15T08:57:07.285Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-15T08:57:07.737Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-16T02:46:04.024Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-16T02:46:06.162Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-16T02:55:02.012Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-16T02:55:02.518Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-16T06:15:44.053Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-16T06:15:46.160Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-16T06:16:11.749Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-16T06:16:12.292Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-16T06:30:45.019Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-16T06:30:45.468Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T10:01:37.691Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T10:01:38.163Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T10:14:05.211Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T10:14:05.647Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:01:46.872Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:01:47.398Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:03:03.335Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:03:03.864Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:06:17.997Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:06:18.585Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n' +
    '        "day": "2019-20-12",\r\n' +
    '        "time_come": 7,\r\n' +
    '        "time_leave": 9,\r\n' +
    '        "price": 30000,\r\n' +
    '        "car_number": "VK96DE9864",\r\n' +
    '        "slot": 1,\r\n' +
    '        "accountId": 1,\r\n' +
    '        "yardId": 1,\r\n' +
    ' }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-17T16:07:51.974Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n' +
    '        "day": "2019-20-12",\r\n' +
    '        "time_come": 7,\r\n' +
    '        "time_leave": 9,\r\n' +
    '        "price": 30000,\r\n' +
    '        "car_number": "VK96DE9864",\r\n' +
    '        "slot": 1,\r\n' +
    '        "accountId": 1,\r\n' +
    '        "yardId": 1,\r\n' +
    ' }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-17T16:08:27.129Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n' +
    '        "day": "2019-20-12",\r\n' +
    '        "time_come": 7,\r\n' +
    '        "time_leave": 9,\r\n' +
    '        "price": 30000,\r\n' +
    '        "car_number": "VK96DE9864",\r\n' +
    '        "slot": 1,\r\n' +
    '        "accountId": 1,\r\n' +
    '        "yardId": 1,\r\n' +
    ' }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-17T16:09:17.843Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n' +
    '        "day": "2019-20-12",\r\n' +
    '        "time_come": 7,\r\n' +
    '        "time_leave": 9,\r\n' +
    '        "price": 30000,\r\n' +
    '        "car_number": "VK96DE9864",\r\n' +
    '        "slot": 1,\r\n' +
    '        "accountId": 1,\r\n' +
    '        "yardId": 1,\r\n' +
    ' }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-17T16:10:36.069Z'
}
{
  expose: true,
  statusCode: 400,
  status: 400,
  body: '{\r\n' +
    '        "day": "2019-20-12",\r\n' +
    '        "time_come": 7,\r\n' +
    '        "time_leave": 9,\r\n' +
    '        "price": 30000,\r\n' +
    '        "car_number": "VK96DE9864",\r\n' +
    '        "slot": 1,\r\n' +
    '        "accountId": 1,\r\n' +
    '        "yardId": 1,\r\n' +
    ' }',
  type: 'entity.parse.failed',
  level: 'error',
  timestamp: '2019-12-17T16:11:51.899Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:23:17.161Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:23:17.735Z'
}
{
  generatedMessage: false,
  code: 'ERR_ASSERTION',
  actual: undefined,
  expected: true,
  operator: '==',
  level: 'error',
  message: 'Missing where attribute in the options parameterMissing where attribute in the options parameter',
  stack: 'AssertionError [ERR_ASSERTION]: Missing where attribute in the options parameter\n' +
    '    at Function._optionsMustContainWhere (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3427:5)\n' +
    '    at Function.update (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3053:10)\n' +
    '    at booking (D:\\CarParking-BackEnd\\controllers\\customerController.js:238:40)',
  timestamp: '2019-12-17T16:23:24.303Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:23:40.431Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:23:40.988Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:24:11.572Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:24:16.343Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:24:25.898Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:24:26.345Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:28:22.641Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:28:23.106Z'
}
{
  generatedMessage: false,
  code: 'ERR_ASSERTION',
  actual: false,
  expected: true,
  operator: '==',
  level: 'error',
  message: 'Expected plain object, array or sequelize method in the options.where parameterExpected plain object, array or sequelize method in the options.where parameter',
  stack: 'AssertionError [ERR_ASSERTION]: Expected plain object, array or sequelize method in the options.where parameter\n' +
    '    at Function._optionsMustContainWhere (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3428:5)\n' +
    '    at Function.update (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3053:10)\n' +
    '    at booking (D:\\CarParking-BackEnd\\controllers\\customerController.js:238:40)',
  timestamp: '2019-12-17T16:28:29.495Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:28:44.280Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:28:44.775Z'
}
{
  generatedMessage: false,
  code: 'ERR_ASSERTION',
  actual: false,
  expected: true,
  operator: '==',
  level: 'error',
  message: 'Expected plain object, array or sequelize method in the options.where parameterExpected plain object, array or sequelize method in the options.where parameter',
  stack: 'AssertionError [ERR_ASSERTION]: Expected plain object, array or sequelize method in the options.where parameter\n' +
    '    at Function._optionsMustContainWhere (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3428:5)\n' +
    '    at Function.update (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3053:10)\n' +
    '    at booking (D:\\CarParking-BackEnd\\controllers\\customerController.js:238:40)',
  timestamp: '2019-12-17T16:28:53.033Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-17T16:58:25.065Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-17T16:58:25.527Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:15:38.392Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:15:38.918Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:18:07.133Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:18:07.614Z'
}
{
  generatedMessage: false,
  code: 'ERR_ASSERTION',
  actual: false,
  expected: true,
  operator: '==',
  level: 'error',
  message: 'Expected plain object, array or sequelize method in the options.where parameterExpected plain object, array or sequelize method in the options.where parameter',
  stack: 'AssertionError [ERR_ASSERTION]: Expected plain object, array or sequelize method in the options.where parameter\n' +
    '    at Function._optionsMustContainWhere (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3428:5)\n' +
    '    at Function.update (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\model.js:3053:10)\n' +
    '    at booking (D:\\CarParking-BackEnd\\controllers\\customerController.js:238:40)',
  timestamp: '2019-12-18T00:18:13.415Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:18:46.587Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:18:47.106Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'accountId' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Prepare.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'accountId' in 'where clause'",
    sql: 'UPDATE `accounts` SET `balance`=? WHERE `accountId` = ?',
    parameters: [ 490000, 1 ]
  },
  original: Error: Unknown column 'accountId' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Prepare.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'accountId' in 'where clause'",
    sql: 'UPDATE `accounts` SET `balance`=? WHERE `accountId` = ?',
    parameters: [ 490000, 1 ]
  },
  sql: 'UPDATE `accounts` SET `balance`=? WHERE `accountId` = ?',
  parameters: [ 490000, 1 ],
  level: 'error',
  message: "Unknown column 'accountId' in 'where clause'Unknown column 'accountId' in 'where clause'",
  stack: "SequelizeDatabaseError: Unknown column 'accountId' in 'where clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at handler (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Prepare.onResult (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:595:11)\n' +
    '    at Prepare.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-12-18T00:18:50.255Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:19:16.722Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:19:17.208Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Unknown column 'accountId' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Prepare.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'accountId' in 'where clause'",
    sql: 'UPDATE `accounts` SET `balance`=? WHERE `accountId` = ?',
    parameters: [ 490000, 1 ]
  },
  original: Error: Unknown column 'accountId' in 'where clause'
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Prepare.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_BAD_FIELD_ERROR',
    errno: 1054,
    sqlState: '42S22',
    sqlMessage: "Unknown column 'accountId' in 'where clause'",
    sql: 'UPDATE `accounts` SET `balance`=? WHERE `accountId` = ?',
    parameters: [ 490000, 1 ]
  },
  sql: 'UPDATE `accounts` SET `balance`=? WHERE `accountId` = ?',
  parameters: [ 490000, 1 ],
  level: 'error',
  message: "Unknown column 'accountId' in 'where clause'Unknown column 'accountId' in 'where clause'",
  stack: "SequelizeDatabaseError: Unknown column 'accountId' in 'where clause'\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at handler (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Prepare.onResult (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:595:11)\n' +
    '    at Prepare.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-12-18T00:19:20.472Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:19:42.084Z'
}
{
  name: 'SequelizeDatabaseError',
  parent: Error: Table 'carparking_db.transactions' doesn't exist
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_NO_SUCH_TABLE',
    errno: 1146,
    sqlState: '42S02',
    sqlMessage: "Table 'carparking_db.transactions' doesn't exist",
    sql: "SELECT `id`, `day`, `time_come`, `time_leave`, `price`, `car_number`, `slot`, `accountId`, `yardId` FROM `transactions` AS `transaction` WHERE `transaction`.`day` = '2019-20-12' AND `transaction`.`time_come` = 7 AND `transaction`.`yardId` = 1;",
    parameters: undefined
  },
  original: Error: Table 'carparking_db.transactions' doesn't exist
      at Packet.asError (D:\CarParking-BackEnd\node_modules\mysql2\lib\packets\packet.js:712:17)
      at Query.execute (D:\CarParking-BackEnd\node_modules\mysql2\lib\commands\command.js:28:26)
      at Connection.handlePacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:408:32)
      at PacketParser.onPacket (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:70:12)
      at PacketParser.executeStart (D:\CarParking-BackEnd\node_modules\mysql2\lib\packet_parser.js:75:16)
      at Socket.<anonymous> (D:\CarParking-BackEnd\node_modules\mysql2\lib\connection.js:77:25)
      at Socket.emit (events.js:209:13)
      at addChunk (_stream_readable.js:305:12)
      at readableAddChunk (_stream_readable.js:286:11)
      at Socket.Readable.push (_stream_readable.js:220:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:182:23) {
    code: 'ER_NO_SUCH_TABLE',
    errno: 1146,
    sqlState: '42S02',
    sqlMessage: "Table 'carparking_db.transactions' doesn't exist",
    sql: "SELECT `id`, `day`, `time_come`, `time_leave`, `price`, `car_number`, `slot`, `accountId`, `yardId` FROM `transactions` AS `transaction` WHERE `transaction`.`day` = '2019-20-12' AND `transaction`.`time_come` = 7 AND `transaction`.`yardId` = 1;",
    parameters: undefined
  },
  sql: "SELECT `id`, `day`, `time_come`, `time_leave`, `price`, `car_number`, `slot`, `accountId`, `yardId` FROM `transactions` AS `transaction` WHERE `transaction`.`day` = '2019-20-12' AND `transaction`.`time_come` = 7 AND `transaction`.`yardId` = 1;",
  parameters: undefined,
  level: 'error',
  message: "Table 'carparking_db.transactions' doesn't existTable 'carparking_db.transactions' doesn't exist",
  stack: "SequelizeDatabaseError: Table 'carparking_db.transactions' doesn't exist\n" +
    '    at Query.formatError (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:244:16)\n' +
    '    at Query.handler [as onResult] (D:\\CarParking-BackEnd\\node_modules\\sequelize\\lib\\dialects\\mysql\\query.js:51:23)\n' +
    '    at Query.execute (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\commands\\command.js:30:14)\n' +
    '    at Connection.handlePacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:408:32)\n' +
    '    at PacketParser.onPacket (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:70:12)\n' +
    '    at PacketParser.executeStart (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\packet_parser.js:75:16)\n' +
    '    at Socket.<anonymous> (D:\\CarParking-BackEnd\\node_modules\\mysql2\\lib\\connection.js:77:25)\n' +
    '    at Socket.emit (events.js:209:13)\n' +
    '    at addChunk (_stream_readable.js:305:12)\n' +
    '    at readableAddChunk (_stream_readable.js:286:11)\n' +
    '    at Socket.Readable.push (_stream_readable.js:220:10)\n' +
    '    at TCP.onStreamRead (internal/stream_base_commons.js:182:23)',
  timestamp: '2019-12-18T00:19:46.526Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:19:47.835Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:20:08.425Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:20:08.890Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:20:27.989Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:20:28.510Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:20:30.095Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:20:30.579Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:41:57.517Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:41:58.041Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:57:34.139Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:57:34.638Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:58:06.898Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:58:07.377Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:58:56.946Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:58:57.438Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T00:59:42.146Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T00:59:42.571Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:00:13.444Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:00:13.906Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:02:15.365Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:02:15.856Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:03:43.746Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:03:44.358Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:04:06.104Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:04:06.535Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:04:18.231Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:04:18.685Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:04:50.216Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:04:50.635Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:05:04.670Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:05:05.036Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:07:38.886Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:07:39.328Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:08:07.106Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:08:07.551Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:11:14.579Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:11:15.811Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:12:18.600Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:12:19.027Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:16:51.137Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:16:51.551Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:17:20.351Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:17:20.811Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:19:13.568Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:19:13.980Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:20:33.965Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:20:34.387Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:20:54.402Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:20:54.862Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:21:17.571Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:21:18.040Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:25:48.340Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:25:48.768Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:27:25.536Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:27:25.986Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:28:01.054Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:28:01.644Z'
}
{
  level: 'error',
  message: "Cannot read property 'car_number' of nullCannot read property 'car_number' of null",
  stack: "TypeError: Cannot read property 'car_number' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:95:37)',
  timestamp: '2019-12-18T01:33:42.462Z'
}
{
  level: 'error',
  message: "Cannot read property 'car_number' of nullCannot read property 'car_number' of null",
  stack: "TypeError: Cannot read property 'car_number' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:95:37)',
  timestamp: '2019-12-18T01:33:45.771Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:36:49.452Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:36:49.892Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:51:40.313Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:51:40.740Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T01:52:03.888Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T01:52:04.371Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T02:37:56.719Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T02:37:57.172Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T02:51:18.648Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T02:51:19.109Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T02:51:49.938Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T02:51:50.390Z'
}
{
  level: 'error',
  message: "Cannot read property 'car_number' of nullCannot read property 'car_number' of null",
  stack: "TypeError: Cannot read property 'car_number' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:95:37)',
  timestamp: '2019-12-18T02:54:36.144Z'
}
{
  level: 'error',
  message: "Cannot read property 'car_number' of nullCannot read property 'car_number' of null",
  stack: "TypeError: Cannot read property 'car_number' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:95:37)',
  timestamp: '2019-12-18T02:54:38.371Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T02:54:58.512Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T02:54:58.928Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T03:26:47.697Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T03:26:48.101Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-18T03:35:32.609Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-18T03:35:35.186Z'
}
{
  level: 'error',
  message: "Cannot read property 'balance' of nullCannot read property 'balance' of null",
  stack: "TypeError: Cannot read property 'balance' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:98:40)',
  timestamp: '2019-12-18T04:42:20.656Z'
}
{
  level: 'error',
  message: "Cannot read property 'balance' of nullCannot read property 'balance' of null",
  stack: "TypeError: Cannot read property 'balance' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:98:40)',
  timestamp: '2019-12-18T04:42:21.868Z'
}
{
  level: 'error',
  message: "Cannot read property 'balance' of nullCannot read property 'balance' of null",
  stack: "TypeError: Cannot read property 'balance' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:98:40)',
  timestamp: '2019-12-18T04:42:22.718Z'
}
{
  level: 'error',
  message: "Cannot read property 'balance' of nullCannot read property 'balance' of null",
  stack: "TypeError: Cannot read property 'balance' of null\n" +
    '    at report_handling (D:\\CarParking-BackEnd\\controllers\\adminController.js:98:40)',
  timestamp: '2019-12-18T04:42:23.160Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-19T13:41:43.730Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-19T13:41:44.165Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-19T13:58:27.619Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-19T13:58:28.096Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-19T13:58:40.273Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-19T13:58:40.743Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-19T14:05:17.322Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-19T14:05:17.780Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-19T14:05:58.199Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-19T14:05:58.652Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-19T23:04:37.617Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-19T23:04:38.175Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-12-20T01:38:08.583Z'
}
{ level: 'error', timestamp: '2019-12-20T01:38:08.586Z' }
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-12-20T02:15:16.510Z'
}
{ level: 'error', timestamp: '2019-12-20T02:15:16.512Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-20T02:15:56.496Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-20T02:15:56.998Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-22T02:02:38.596Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-22T02:02:40.650Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-22T02:07:45.210Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-22T02:07:45.741Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-22T02:58:34.960Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-22T02:58:35.426Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-12-22T02:59:07.498Z'
}
{ level: 'error', timestamp: '2019-12-22T02:59:07.502Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-22T03:02:33.583Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-22T03:02:34.066Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-22T03:12:04.400Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-22T03:12:04.869Z'
}
{
  level: 'error',
  message: TypeError: Cannot read property 'toJSON' of null
      at login (D:\CarParking-BackEnd\controllers\authController.js:27:36),
  timestamp: '2019-12-22T03:23:01.203Z'
}
{ level: 'error', timestamp: '2019-12-22T03:23:01.209Z' }
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-22T03:31:09.283Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-22T03:31:09.700Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:09:59.960Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T13:10:10.044Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:18:12.352Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T13:18:22.458Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:18:56.241Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T13:19:06.315Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:26:11.796Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T13:26:21.866Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:27:39.883Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:27:44.993Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:33:51.622Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T13:34:01.695Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:38:59.718Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T13:39:09.818Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:48:01.157Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T13:48:11.251Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:52:22.716Z'
}
{
  message: "Unknown database 'car-parking'",
  level: 'error',
  timestamp: '2019-12-24T13:52:23.751Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:55:50.842Z'
}
{
  message: "Unknown database 'car-parking'",
  level: 'error',
  timestamp: '2019-12-24T13:55:51.648Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:56:16.001Z'
}
{
  message: "Unknown database 'thefuck'",
  level: 'error',
  timestamp: '2019-12-24T13:56:16.763Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:56:25.025Z'
}
{
  message: "Access denied for user 'admin'@'117.2.142.75' (using password: YES)",
  level: 'error',
  timestamp: '2019-12-24T13:56:25.812Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T13:56:32.390Z'
}
{
  message: "Unknown database 'car-parking'",
  level: 'error',
  timestamp: '2019-12-24T13:56:33.193Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:08:18.655Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T14:08:28.756Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:11:10.619Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T14:11:20.686Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:12:36.969Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T14:12:47.030Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:14:17.059Z'
}
{
  message: 'connect ETIMEDOUT',
  level: 'error',
  timestamp: '2019-12-24T14:14:27.145Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:18:57.561Z'
}
{
  message: "Unknown database 'carparking'",
  level: 'error',
  timestamp: '2019-12-24T14:18:58.651Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:20:19.125Z'
}
{
  message: "Unknown database 'carparking'",
  level: 'error',
  timestamp: '2019-12-24T14:20:20.595Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:23:53.342Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:23:54.569Z'
}
{
  message: "Unknown database 'mydatabase'",
  level: 'error',
  timestamp: '2019-12-24T14:23:55.412Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:25:56.741Z'
}
{
  message: 'getaddrinfo ENOTFOUND carparking.c83fc5fzexme.us-east-2.rds.amazonaws.com',
  level: 'error',
  timestamp: '2019-12-24T14:25:56.814Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:26:19.413Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:26:39.558Z'
}
{
  message: 'getaddrinfo ENOTFOUND carparking.c83fc5fzexme.us-east-2.rds.amazonaws.com',
  level: 'error',
  timestamp: '2019-12-24T14:26:39.609Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:26:43.291Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:28:04.590Z'
}
{
  message: 'getaddrinfo ENOTFOUND carparking.c83fc5fzexme.us-east-2.rds.amazonaws.com',
  level: 'error',
  timestamp: '2019-12-24T14:28:04.705Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:30:26.221Z'
}
{
  message: "Unknown database 'mydatabase'",
  level: 'error',
  timestamp: '2019-12-24T14:30:28.073Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:36:46.371Z'
}
{
  message: 'DATABASE & TABLES CREATED',
  level: 'info',
  timestamp: '2019-12-24T14:36:58.582Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:38:34.253Z'
}
{
  message: '"user" connection config property must be a string',
  level: 'error',
  timestamp: '2019-12-24T14:38:34.873Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:39:11.166Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:39:12.147Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:39:14.228Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:39:24.863Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:39:27.034Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:39:29.091Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:39:34.407Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:39:36.457Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:40:31.707Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:40:33.801Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:40:48.807Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:40:49.905Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:40:51.974Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:41:02.760Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:41:04.758Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:41:06.851Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:41:22.482Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:41:24.526Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:44:11.139Z'
}
{
  message: 'SERVER STARTED AT PORT 3000...',
  level: 'info',
  timestamp: '2019-12-24T14:44:12.619Z'
}
{
  message: 'connect ECONNREFUSED 127.0.0.1:3306',
  level: 'error',
  timestamp: '2019-12-24T14:44:14.725Z'
}
